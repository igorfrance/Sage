<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kelp</name>
    </assembly>
    <members>
        <member name="T:Kelp.XmlNamespaces">
            <summary>
            Defines the namespaces and the namespace manager in use throughout the system.
            </summary>
        </member>
        <member name="F:Kelp.XmlNamespaces.KelpNsPrefix">
            <summary>
            Defines the prefix for the main Kelp namespace.
            </summary>
        </member>
        <member name="F:Kelp.XmlNamespaces.KelpNamespace">
            <summary>
            Defines the main Kelp namespace.
            </summary>
        </member>
        <member name="P:Kelp.XmlNamespaces.Manager">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNamespaceManager"/> that can be used everywhere where selecting with namespaces needs to be done.
            </summary>
        </member>
        <member name="T:Kelp.Core.Extensions.DateTimeExtensions">
            <summary>
            Provides <see cref="T:System.DateTime"/> extension methods.
            </summary>
        </member>
        <member name="M:Kelp.Core.Extensions.DateTimeExtensions.Offset(System.DateTime,System.String)">
            <summary>
            Offsets the date by the specified time.
            </summary>
            <remarks><para>
            The time to offset this <c>DateTime</c> with is expressed as a string written in a specific format. This
            is useful in situations where relative date values need to be expressed as strings, for instance in configuration
            files.
            </para>
            <para>The format of this string is: <c>([+/-]\d+)(mhdMy)</c>, where the first part is the amount 
            (positive or negative), and the second part is the unit ([m]inutes, [h]ours, [d]ays, [M]onths or [y]ears).</para>
            <para>For instance, to offset a given date by 2 hours (to set it 2 hours in the future), you would specify it with
            <c>"+2h"</c>: <code>DateTime d2 = d1.Offset("+2h");</code></para>
            <para>Similarly, to set a given date to a year earlier, you would specify it with <c>"-1y"</c>: 
            <code>DateTime d2 = d1.Offset("-1y");</code></para>
            </remarks>
            <param name="dt">The value to offset</param>
            <param name="offset">The string that specifies the time with which to offset the value.</param>
            <returns>A new date, offset from the specified date by the specified value.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.DateTimeExtensions.IsEqualByDateTo(System.DateTime,System.DateTime)">
            <summary>
            Determines whether instance <paramref name="dt"/> is equal to <paramref name="other"/>, comparing
            only the year, month and date, disregarding the time completely.
            </summary>
            <param name="dt">The current instance.</param>
            <param name="other">The date to compare to.</param>
            <returns>
            <c>true</c> if instance <paramref name="dt"/> is equal to <paramref name="other"/>; 
             otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kelp.Core.Extensions.ExceptionExtensions">
            <summary>
            Provides <see cref="T:System.Exception"/> extension methods.
            </summary>
        </member>
        <member name="M:Kelp.Core.Extensions.ExceptionExtensions.InnermostExceptionMessage(System.Exception)">
            <summary>
            Gets the message of the <see cref="T:System.Exception"/> innermost to the current <see cref="T:System.Exception"/>.
            </summary>
            <param name="instance">The <see cref="T:System.Exception"/> instance.</param>
            <returns>The message of the <see cref="T:System.Exception"/> innermost to the current <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.ExceptionExtensions.InnermostExceptionTypeName(System.Exception)">
            <summary>
            Gets the type name of the <see cref="T:System.Exception"/> innermost to the current <see cref="T:System.Exception"/>.
            </summary>
            <param name="instance">The <see cref="T:System.Exception"/> instance.</param>
            <returns>The type name of the <see cref="T:System.Exception"/> innermost to the current <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.ExceptionExtensions.InnermostExceptionStackTrace(System.Exception)">
            <summary>
            Gets the stack trace name of the <see cref="T:System.Exception"/> innermost to the current <see cref="T:System.Exception"/>.
            </summary>
            <param name="instance">The <see cref="T:System.Exception"/> instance.</param>
            <returns>The stack trace of the <see cref="T:System.Exception"/> innermost to the current <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:Kelp.Core.Extensions.IEnumerableExtensions">
            <summary>
            Implements extensions to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Kelp.Core.Extensions.IEnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a string of all values in the collection joined with the specified separator.
            </summary>
            <typeparam name="T">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.</typeparam>
            <param name="collection">The collection whose values should be joined.</param>
            <param name="separator">The separator to use for joining the collection's values.</param>
            <returns>The joined collection.</returns>
            <example>
            var myList = new List&lt;string&gt; { "red", "green", "blue" };
            // The following line returns "red,green,blue":
            var joined = myList.Join(","); 
            </example>
        </member>
        <member name="M:Kelp.Core.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Executes the specified <paramref name="action"/> on each of the elements in the <paramref name="collection"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection on which to operate.</param>
            <param name="action">The action to apply to each of the elements.</param>
        </member>
        <member name="M:Kelp.Core.Extensions.IEnumerableExtensions.IndexOf(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns the index of the specified <paramref name="item"/> in the specified <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection to search</param>
            <param name="item">The item to find</param>
            <returns>The index of the specified <paramref name="item"/> in the specified <paramref name="collection"/>,
            if found and -1 if the item could not be found</returns>
        </member>
        <member name="T:Kelp.Core.Extensions.StopwatchExtensions">
            <summary>
            Implements the extensions to the <see cref="T:System.Diagnostics.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:Kelp.Core.Extensions.StopwatchExtensions.TimeMilliseconds(System.Diagnostics.Stopwatch,System.Action)">
            <summary>
            Executes the specified <paramref name="action"/> and returns the elapsed milliseconds.
            </summary>
            <param name="sw">The stopwatch instance.</param>
            <param name="action">The action to execute.</param>
            <returns>The milliseconds it took to execute the specified action.</returns>
        </member>
        <member name="T:Kelp.Core.Extensions.StringExtensions">
            <summary>
            Defines extension methods for strings.
            </summary>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.ContainsAnyOf(System.String,System.String[])">
            <summary>
            Returns <c>true</c> if the string contains any one of the supplied values.
            </summary>
            <param name="subject">The string subject being tested.</param>
            <param name="values">The values to test for.</param>
            <returns><c>true</c> if the string contains any one of the supplied values; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.ContainsAnyOf(System.String,System.Boolean,System.String[])">
            <summary>
            Returns <c>true</c> if the string contains any one of the supplied values.
            </summary>
            <param name="subject">The string subject being tested.</param>
            <param name="caseInSensitive">If this argument is <c>true</c>, the search will ignore case.</param>
            <param name="values">The values to test for.</param>
            <returns><c>true</c> if the string contains any one of the supplied values; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.ContainsAllOf(System.String,System.String[])">
            <summary>
            Returns <c>true</c> if the string contains all of the supplied values.
            </summary>
            <param name="subject">The string subject being tested.</param>
            <param name="values">The values to test for.</param>
            <returns><c>true</c> if the string contains any one of the supplied values; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.ContainsAllOf(System.String,System.Boolean,System.String[])">
            <summary>
            Returns <c>true</c> if the string contains all of the supplied values.
            </summary>
            <param name="subject">The string subject being tested.</param>
            <param name="caseInSensitive">If this argument is <c>true</c>, the search will ignore case.</param>
            <param name="values">The values to test for.</param>
            <returns><c>true</c> if the string contains any one of the supplied values; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.CountOf(System.String,System.String)">
            <summary>
            Returns the number of occurrences of value <paramref name="text"/> within the current <paramref name="subject"/>.
            </summary>
            <param name="subject">The string to be searched</param>
            <param name="text">The value to search for</param>
            <returns>The number of occurrences of value <paramref name="text"/> within the current <paramref name="subject"/>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.EqualsAnyOf(System.String,System.String[])">
            <summary>
            Returns <c>true</c> if the string equals any one of the supplied values.
            </summary>
            <param name="subject">The string subject being tested.</param>
            <param name="values">The values to test for.</param>
            <returns><c>true</c> if the string contains any one of the supplied values; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.EqualsAnyOf(System.String,System.Boolean,System.String[])">
            <summary>
            Returns <c>true</c> if the string equals any one of the supplied values.
            </summary>
            <param name="subject">The string subject being tested.</param>
            <param name="caseInSensitive">If this argument is <c>true</c>, the search will ignore case.</param>
            <param name="values">The values to test for.</param>
            <returns><c>true</c> if the string contains any one of the supplied values; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.EscapeMeta(System.String)">
            <summary>
            Escapes all characters in <paramref name="subject"/> that may be treated as meta characters (such as '\.^$*+?(){['),
            so that it can be interpreted as-is in regular expressions. 
            </summary>
            <param name="subject">The subject to escape.</param>
            <returns>The escaped version of <paramref name="subject"/>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
            Searches the specified <paramref name="subject"/> for the first occurrence of the specified regular 
            <paramref name="expression"/>.
            </summary>
            <param name="subject">The string to search for a match.</param>
            <param name="expression">The regular expression pattern to match.</param>
            <returns>
            An object that contains information about the match.
            </returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified <paramref name="subject"/> for the first occurrence of the specified regular
            <paramref name="expression"/>.
            </summary>
            <param name="subject">The string to search for a match.</param>
            <param name="expression">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <returns>
            An object that contains information about the match.
            </returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.ReplaceAll(System.String,System.String,System.String)">
            <summary>
            Replaces the string mathing the specified regular <paramref name="expression"/> string with the specified 
            <paramref name="replacement"/> string.
            </summary>
            <param name="subject">The string to replace.</param>
            <param name="expression">The pattern to initialize the regular expression with.</param>
            <param name="replacement">The replacement value string.</param>
            <returns>The original string with all substrings matching <paramref name="expression"/> replaced with
            the specified <paramref name="replacement"/> string.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.ReplaceAll(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Replaces the string mathing the specified regular <paramref name="expression"/> with the specified 
            <paramref name="replacement"/> string.
            </summary>
            <param name="subject">The string to replace.</param>
            <param name="expression">The regular expression to use.</param>
            <param name="replacement">The replacement value string.</param>
            <returns>The original string with all substrings matching <paramref name="expression"/> replaced with
            the specified <paramref name="replacement"/> string.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.StringExtensions.ToUpperCaseFirst(System.String)">
            <summary>
            Returns the specified <paramref name="instance"/> with the first letter converted to upper case.
            </summary>
            <param name="instance">The value to process.</param>
        </member>
        <member name="T:Kelp.Core.Extensions.XmlDocumentExtensions">
            <summary>
            Provides extensions for <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.String)">
            <summary>
            Loads the XML document from the specified URL, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="filename">URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).</param>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.String,System.Xml.XmlUrlResolver)">
            <summary>
            Loads the XML document from the specified URL, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="filename">URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).</param>
            <param name="resolver">The resolver to use to resolve external references.</param>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.IO.TextReader)">
            <summary>
            Loads the XML document from the specified <see cref="T:System.IO.TextReader"/>, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="reader">The TextReader used to feed the XML data into the document.</param>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.IO.TextReader,System.Xml.XmlUrlResolver)">
            <summary>
            Loads the XML document from the specified <see cref="T:System.IO.TextReader"/>, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="reader">The TextReader used to feed the XML data into the document.</param>
            <param name="resolver">The resolver to use to resolve external references.</param>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Loads the XML document from the specified stream, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="stream">The stream containing the XML document to load.</param>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.IO.Stream,System.Xml.XmlUrlResolver)">
            <summary>
            Loads the XML document from the specified stream, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="stream">The stream containing the XML document to load.</param>
            <param name="resolver">The resolver to use to resolve external references.</param>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <summary>
            Loads the XML document from the specified <see cref="T:System.Xml.XmlReader"/>, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="reader">The XmlReader used to feed the XML data into the document.</param>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlDocumentExtensions.LoadX(System.Xml.XmlDocument,System.Xml.XmlReader,System.Xml.XmlUrlResolver)">
            <summary>
            Loads the XML document from the specified <see cref="T:System.Xml.XmlReader"/>, with support for <c>XIncludes</c>.
            </summary>
            <param name="document">The document being extended.</param>
            <param name="reader">The XmlReader used to feed the XML data into the document.</param>
            <param name="resolver">The resolver to use to resolve external references.</param>
        </member>
        <member name="T:Kelp.Core.Extensions.XmlNodeExtensions">
            <summary>
            Implements extension methods to the <see cref="T:System.Xml.XmlNode"/> class.
            </summary>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.Aggregate(System.Xml.XmlNode,System.String)">
            <summary>
            Iterates through xml nodes selected from <paramref name="instance"/> using the specified 
            <paramref name="xpath"/>, and pushes node text info the list of values that is returned.
            </summary>
            <param name="instance">The xml node from which to execute the xpath selection.</param>
            <param name="xpath">The XPath expression that specifies what to select (e.g. './child/@attrib1').</param>
            <returns>
            List of node values, selected with the specified <paramref name="xpath"/>.
            </returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.Aggregate(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Iterates through xml nodes selected from <paramref name="instance"/> using the specified
            <paramref name="xpath"/> and <paramref name="manager"/>, and pushes node text info the list of
            values that is returned.
            </summary>
            <param name="instance">The xml node from which to execute the xpath selection.</param>
            <param name="xpath">The XPath expression that specifies what to select (e.g. './child/@attrib1').</param>
            <param name="manager">The XML namespace manager to use with the specified <paramref name="xpath"/>.</param>
            <returns>
            List of node values, selected with the specified <paramref name="xpath"/>.
            </returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.AppendElement(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Appends the specified element to the current node and returns it.
            </summary>
            <param name="instance">The target node to append the element to.</param>
            <param name="child">The child element to append.</param>
            <returns>The <paramref name="child"/> element that was appended.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.AppendElement(System.Xml.XmlNode,System.String)">
            <summary>
            Appends the specified element to the current node and returns it.
            </summary>
            <param name="instance">The target node to append the element to.</param>
            <param name="elementName">The name of the element to create.</param>
            <returns>The element that was created and appended to <paramref name="instance"/>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.AppendElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Appends the specified element to the current node and returns it.
            </summary>
            <param name="instance">The target node to append the element to.</param>
            <param name="qualifiedName">The qualified name of the element.</param>
            <param name="nodeNamespace">The XML namespace of the element to create.</param>
            <returns>The element that was created and appended to <paramref name="instance"/>.</returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.SelectSingleElement(System.Xml.XmlNode,System.String)">
            <summary>
            Selects the first XmlNode that matches the XPath expression and returns it an an <see cref="T:System.Xml.XmlElement"/>
            </summary>
            <param name="instance">The node being extended</param>
            <param name="xpath">The XPath expression.</param>
            <returns>The first XmlNode that matches the XPath expression and returns it an an <see cref="T:System.Xml.XmlElement"/></returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.SelectSingleElement(System.Xml.XmlNode,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Selects the first XmlNode that matches the XPath expression and returns it an an <see cref="T:System.Xml.XmlElement"/>.
            Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
            <param name="instance">The node being extended</param>
            <param name="xpath">The XPath expression.</param>
            <param name="manager">An <see cref="T:System.Xml.XmlNamespaceManager"/> to use for resolving namespaces for prefixes in the XPath expression.</param>
            <returns>
            The first XmlNode that matches the XPath expression and returns it an an <see cref="T:System.Xml.XmlElement"/>
            </returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.ToJson(System.Xml.XmlElement)">
            <summary>
            Serialized the specified <paramref name="element"/> the a JSON string.
            </summary>
            <param name="element">The element to convert.</param>
            <returns>The JSON version of the specified <paramref name="element"/></returns>
        </member>
        <member name="M:Kelp.Core.Extensions.XmlNodeExtensions.ToJson(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Serialized the specified <paramref name="element"/> the a JSON string.
            </summary>
            <param name="element">The element to convert.</param>
            <param name="prettyPrint">If set to <c>true</c>, the resulting string will be formatted for easier reading.</param>
            <returns>
            The JSON version of the specified <paramref name="element"/>
            </returns>
        </member>
        <member name="T:Kelp.Core.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Core.OrderedDictionary`2"/> class. 
            Initializes a new instance of the OrderedDictionary class.
            </summary>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Core.OrderedDictionary`2"/> class. 
            Initializes a new instance of the OrderedDictionary class using the specified initial capacity.
            </summary>
            <param name="capacity">
            The initial number of elements that the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> can contain.
            </param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Core.OrderedDictionary`2"/> class. 
            Initializes a new instance of the OrderedDictionary class using the specified comparer.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when 
            comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 
            for the type of the key.
            </param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Core.OrderedDictionary`2"/> class. 
            Initializes a new instance of the OrderedDictionary class using the specified initial capacity and comparer.
            </summary>
            <param name="capacity">
            The initial number of elements that the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection can contain.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when 
            comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 
            for the type of the key.
            </param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <c>OrderedDictionary</c> collection with the specified key and value at the specified 
            index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the 
            dictionary is a reference type.</param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key in the <c>OrderedDictionary</c>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Kelp.Core.OrderedDictionary`2"/></param>
            <returns>The zero-based index of <paramref name="key"/>, if <paramref name="key"/> is found in the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/>; otherwise, -1</returns>
            <remarks>This method performs a linear search; therefore it has a cost of O(n) at worst.</remarks>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the entry at the specified index from the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection.
            </summary>
            <param name="index">The zero-based index of the entry to remove.</param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection with the lowest 
            available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <c>Item</c> property to add new elements by 
            setting the value of a key that does not exist in the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection; however, if the 
            specified key already exists in the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/>, setting the 
            <c>Item</c> property overwrites the old value. 
            In contrast, the <c>Add</c> method does not modify existing elements.</para></remarks>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.ICollection"/>.</param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Clear">
            <summary>
            Removes all elements from the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection.
            </summary>
            <remarks>The capacity is not changed as a result of calling this method.</remarks>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Kelp.Core.OrderedDictionary`2"/> 
            collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection.</param>
            <returns><see langword="true"/> if the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection contains an 
            element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.ICollection"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.ICollection"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:System.Collections.ICollection"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key from the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns><see langword="true"/> if the key was found and the corresponding element was removed; 
            otherwise, <see langword="false"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.ICollection"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.ICollection"/>; 
            otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.ICollection"/> is read-only.
            </exception>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is 
            found; otherwise, the default value for the type of <paramref name="value"/>. This parameter can be passed 
            uninitialized.</param>
            <returns><see langword="true"/> if the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> contains an element
            with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"/> object.
            </exception>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.ConvertToKeyType(System.Object)">
            <summary>
            Converts the object passed as a key to the key type of the dictionary
            </summary>
            <param name="keyObject">The key object to check</param>
            <returns>The key object, cast as the key type of the dictionary</returns>
        </member>
        <member name="M:Kelp.Core.OrderedDictionary`2.ConvertToValueType(System.Object)">
            <summary>
            Converts the object passed as a value to the value type of the dictionary
            </summary>
            <param name="value">The object to convert to the value type of the dictionary</param>
            <returns>The value object, converted to the value type of the dictionary</returns>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/values pairs contained in the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection.
            </summary>
            <value>The number of key/value pairs contained in the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection.</value>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> collection is read-only.
            </summary>
            <value><see langword="true"/> if the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> is read-only; 
            otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
            <remarks>
            A collection that is read-only does not allow the addition, removal, or modification of elements 
            after the collection is created.
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modification of 
            the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects 
            those changes.</para>
            </remarks>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> object 
            containing the keys in the <see cref="T:Kelp.Core.OrderedDictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> object 
            containing the keys in the <see cref="T:Kelp.Core.OrderedDictionary`2"/>.</value>
            <remarks>The returned 
            <see cref="T:System.Collections.Generic.ICollection`1"/> object is not a 
            static copy; instead, the collection refers back to the keys in the original 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/>. 
            Therefore, changes to the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/> continue to be 
            reflected in the key collection.</remarks>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> object containing the values in 
            the <see cref="T:Kelp.Core.OrderedDictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> object containing the values in 
            the <see cref="T:Kelp.Core.OrderedDictionary`2"/>.</value>
            <remarks>The returned <see cref="T:System.Collections.Generic.ICollection`1"/> object is not a static copy; 
            instead, the collection refers back to the values in the original 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/>. Therefore, 
            changes to the <see cref="T:Kelp.Core.OrderedDictionary`2"/> 
            continue to be reflected in the value collection.</remarks>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns><c>true</c> if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns><c>true</c> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.Dictionary">
            <summary>
            Gets the dictionary object that stores the keys and values
            </summary>
            <value>The dictionary object that stores the keys and values for the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/></value>
            <remarks>Accessing this property will create the dictionary object if necessary</remarks>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.List">
            <summary>
            Gets the list object that stores the key/value pairs.
            </summary>
            <value>The list object that stores the key/value pairs for the 
            <see cref="T:Kelp.Core.OrderedDictionary`2"/></value>
            <remarks>Accessing this property will create the list object if necessary.</remarks>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it 
            returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
        </member>
        <member name="P:Kelp.Core.OrderedDictionary`2.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <param name="key">The key of the item to get.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:Kelp.Core.QueryString">
            <summary>
            Provides a <see cref="T:System.Collections.Specialized.NameValueCollection"/> variation that provides additional support for working with query strings.
            </summary>
        </member>
        <member name="T:Kelp.IXmlConvertible">
            <summary>
            Defines the interface for objects that support simple conversion to XML.
            </summary>
        </member>
        <member name="M:Kelp.IXmlConvertible.ToXml(System.Xml.XmlDocument)">
            <summary>
            Returns an <see cref="T:System.Xml.XmlElement"/> that represents the current object.
            </summary>
            <param name="ownerDoc">The <see cref="T:System.Xml.XmlDocument"/> to use to create XML elements.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> that represents the current object.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Core.QueryString"/> class.
            </summary>
        </member>
        <member name="M:Kelp.Core.QueryString.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Copies the non-empty entries from the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a new <see cref="T:Kelp.Core.QueryString"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to copy to the new <see cref="T:Kelp.Core.QueryString"/> instance.</param>
        </member>
        <member name="M:Kelp.Core.QueryString.#ctor(System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Core.QueryString"/> class, using the specified cookie collection.
            </summary>
            <param name="collection">The <see cref="T:System.Web.HttpCookieCollection"/> to copy to the new <see cref="T:Kelp.Core.QueryString"/> instance.</param>
        </member>
        <member name="M:Kelp.Core.QueryString.#ctor(System.String)">
            <summary>
            Parses the specified <paramref name="queryString"/> and populates the new <see cref="T:Kelp.Core.QueryString"/> with it.
            </summary>
            <param name="queryString">The query string that contains the name/value pairs to use.</param>
        </member>
        <member name="M:Kelp.Core.QueryString.#ctor(System.String,System.String[])">
            <summary>
            Formats the specified <paramref name="formatString"/>, parses the resulting value and populates the new 
            <see cref="T:Kelp.Core.QueryString"/> with it.
            </summary>
            <param name="formatString">The string that contains format template.</param>
            <param name="formatValues">The values to use for formatting <paramref name="formatString"/>.</param>
        </member>
        <member name="M:Kelp.Core.QueryString.Parse(System.String)">
            <summary>
            Parses the specified query string, adds the resulting values as key/value pairs and returns this instance.
            </summary>
            <param name="queryString">The query string to parse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryString"/> argument is <c>null</c>.</exception>
            <example>
            var coll = new <see cref="T:System.Collections.Specialized.NameValueCollection"/>();
            coll.ParseQueryString("a=12&amp;c=56&amp;color=red");
            </example>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new <see cref="T:Kelp.Core.QueryString"/> instance with identical data as this one.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Merge(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Merges the specified query into the current instance, overwriting any duplicates and returns this instance.
            </summary>
            <param name="query">The query whose values to merge into current instance.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Merge(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Merges the specified query into the current instance, optionally keeping the duplicates from the original query and returns this instance.
            </summary>
            <param name="query">The query whose values to merge into current instance.</param>
            <param name="keepOriginalValues">If <c>true</c>, values from current query with keys that exist in 
            <paramref name="query"/> will be preserved. </param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Add(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Copies the entries in the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/> to the current instance and returns it.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to copy to the current <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Add(System.String,System.String)">
            <summary>
            Adds an entry with the specified name and value to the current instance and returns it.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the entry to add. If the key is a <c>null</c>, no action will be done.</param>
            <param name="value">The <see cref="T:System.String"/> value of the entry to add. If the key is a <c>null</c>, the value added will be an empty string.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Set(System.String,System.String)">
            <summary>
            Sets the specified key/value pair and returns this instance.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Set(System.String,System.Object)">
            <summary>
            Sets the specified key/value pair and returns this instance.
            </summary>
            <param name="key">The key to set.</param>
            <param name="value">The value to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Remove(System.String)">
            <summary>
            Removes the specified key and returns this instance.
            </summary>
            <param name="key">The key to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.HasValid(System.String,System.String)">
            <summary>
            Returns <c>true</c> if the current query has a value with the specified <paramref name="key"/> and the value matches the 
            specified regular <paramref name="expression"/>.
            </summary>
            <param name="key">The key of the value to check.</param>
            <param name="expression">The regular expression to use for checking the value.</param>
            <returns>
            <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.Has(System.String)">
            <summary>
            Determines whether the current <see cref="T:Kelp.Core.QueryString"/> has the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to check.</param>
            <returns>
            <c>true</c> if the current <see cref="T:Kelp.Core.QueryString"/> has the specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetBoolean(System.String)">
            <summary>
            Gets the specified value as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as a <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetByte(System.String)">
            <summary>
            Gets the specified value as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as a <see cref="T:System.Byte"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetByte(System.String,System.Byte)">
            <summary>
            Gets the specified value as a <see cref="T:System.Byte"/>, optionally setting it to the default value.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c> or could not be converted to <see cref="T:System.Byte"/>.</param>
            <returns>
            The specified value as a <see cref="T:System.Byte"/>
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetByte(System.String,System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the specified value as a <see cref="T:System.Byte"/>, optionally setting it to the default value, and ensuring that it falls within the specified range.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c> or could not be converted to <see cref="T:System.Byte"/>.</param>
            <param name="minValue">The minimum allowed value of the range.</param>
            <param name="maxValue">The maximum allowed value of the range.</param>
            <returns>
            The specified value as a <see cref="T:System.Byte"/>
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetInt(System.String)">
            <summary>
            Gets the specified value as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as an <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetInt(System.String,System.Int32)">
            <summary>
            Gets the specified value as an <see cref="T:System.Int32"/>, optionally setting it to the default value.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c> or could not be converted to <see cref="T:System.Int32"/>.</param>
            <returns>
            The specified value as an <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetInt(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the specified value as an <see cref="T:System.Int32"/>, optionally setting it to the default value, and ensuring that it falls within the specified range.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c> or could not be converted to <see cref="T:System.Int32"/>.</param>
            <param name="minValue">The minimum allowed value of the range.</param>
            <param name="maxValue">The maximum allowed value of the range.</param>
            <returns>
            The specified value as an <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetLong(System.String)">
            <summary>
            Gets the specified value as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as a <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetLong(System.String,System.Int64)">
            <summary>
            Gets the specified value as an <see cref="T:System.Int64"/>, optionally setting it to the default value.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c> or could not be converted to <see cref="T:System.Int64"/>.</param>
            <returns>The specified value as an <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetLong(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Gets the specified value as an <see cref="T:System.Int64"/>, optionally setting it to the default value, and ensuring that it falls within the specified range.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c> or could not be converted to <see cref="T:System.Int64"/>.</param>
            <param name="minValue">The minimum allowed value of the range.</param>
            <param name="maxValue">The maximum allowed value of the range.</param>
            <returns>
            The specified value as an <see cref="T:System.Int64"/>
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetDecimal(System.String)">
            <summary>
            Gets the specified value as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as an <see cref="T:System.Decimal"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetFloat(System.String)">
            <summary>
            Gets the specified value as a <see cref="T:System.Single"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as an <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetString(System.String)">
            <summary>
            Gets the specified value as a <see cref="T:System.String"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as an <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetString(System.String,System.String)">
            <summary>
            Gets the specified value as a <see cref="T:System.String"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c>.</param>
            <returns>The specified value as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetString(System.String,System.String,System.Boolean)">
            <summary>
            Gets the specified value as a <see cref="T:System.String"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">The default value to return if the specified key is <c>null</c>.</param>
            <param name="emptyIsValid">If set to <c>true</c> an empty string with the specified key will be considered valid 
            and be returned instead of the default value.</param>
            <returns>
            The specified value as a <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetList(System.String)">
            <summary>
            Gets the specified value as a list of strings.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The specified value as a list of strings.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.GetList(System.String,System.String)">
            <summary>
            Gets the specified value as a list of strings, optionally checked against the specified expression.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="expression">Optional expression to use for checking the list elements.</param>
            <returns>The specified value as a list of strings.</returns>
            <remarks>
            The value with the specified <paramref name="key"/> is split on comma (','), and each of the values is then (optionally)
            checked against the specified <paramref name="expression"/>. If the value is checked it will only be added to the resulting list if
            if matches the <paramref name="expression"/>.
            </remarks>
        </member>
        <member name="M:Kelp.Core.QueryString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that contains this collection's name/value pairs packed as a URL query string.
            </summary>
            <returns>A <see cref="T:System.String"/> that contains this collection's name/value pairs packed as a URL query string.</returns>
            <example>
            var coll = new <see cref="T:System.Collections.Specialized.NameValueCollection"/> {{ "color", "red" }, { "size", "large" }};
            // The following line returns "color=red&amp;size=large":
            var queryString = coll.ToQueryString();
            </example>
        </member>
        <member name="M:Kelp.Core.QueryString.ToString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/> that contains this collection's name/value pairs packed as a URL query string.
            </summary>
            <param name="prependQuestionMark">If set to <c>true</c>, and if collection is not empty, the resulting string will be 
            prepended a '?' symbol.</param>
            <returns>A <see cref="T:System.String"/> that contains this collection's name/value pairs packed as a URL query string.</returns>
            <example>
            var coll = new <see cref="T:System.Collections.Specialized.NameValueCollection"/> {{ "color", "red" }, { "size", "large" }};
            // The following line returns "color=red&amp;size=large":
            var queryString1 = coll.ToQueryString(<c>false</c>);
            // The following line returns "?color=red&amp;size=large":
            var queryString2 = coll.ToQueryString(<see langword="true"/>);
            </example>
        </member>
        <member name="M:Kelp.Core.QueryString.ToXml(System.Xml.XmlDocument)">
            <summary>
            Returns an <see cref="T:System.Xml.XmlElement"/> that contains this collection's name/value pairs set as attributes.
            </summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> to use for creating the nodes.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> that contains this collection's name/value pairs set as attributes.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.ToXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XmlElement"/> that contains this collection's name/value pairs set as attributes, where the element's
            node name will be the specified <paramref name="nodeName"/>.
            </summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> to use for creating the nodes.</param>
            <param name="nodeName">The name of the <see cref="T:System.Xml.XmlElement"/> to create.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> that contains this collection's name/value pairs set as attributes.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.ToXml(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XmlElement"/> that contains this collection's name/value pairs set as attributes, where the element's
            node name will be the specified with <paramref name="qualifiedName"/>, and it's namespace with <paramref name="nodeNamespace"/>.
            </summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> to use for creating the nodes.</param>
            <param name="qualifiedName">The qualified name of the <see cref="T:System.Xml.XmlElement"/> to create.</param>
            <param name="nodeNamespace">The XML namespace of the element to create.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> that contains this collection's name/value pairs set as attributes.</returns>
        </member>
        <member name="M:Kelp.Core.QueryString.ValidName(System.String)">
            <summary>
            Converts any characters invalid for an xml node name with an underscore character.
            </summary>
            <param name="name">Original node name.</param>
            <returns>A valid node name</returns>
        </member>
        <member name="T:Kelp.HttpMock.HttpApplicationStateMock">
            <summary>
            Provides a class for mocking an <code>HttpApplicationStateBase</code>. 
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.Add(System.String,System.Object)">
            <summary>
            Adds a new object to the collection.
            </summary>
            <param name="name">The name of the object to add to the collection.</param>
            <param name="value">The value of the object.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.Get(System.Int32)">
            <summary>
            Gets a state object by index.
            </summary>
            <param name="index">The index of the application state object to get.</param>
            <returns>
            The object referenced by <paramref name="index"/>.
            </returns>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.Get(System.String)">
            <summary>
            Gets a state object by name.
            </summary>
            <param name="name">The name of the object to get.</param>
            <returns>
            The object referenced by <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.GetKey(System.Int32)">
            <summary>
            Gets the name of a state object by index.
            </summary>
            <param name="index">The index of the application state object to get.</param>
            <returns>
            The name of the application state object.
            </returns>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.Remove(System.String)">
            <summary>
            Removes the named object from the collection.
            </summary>
            <param name="name">The name of the object to remove from the collection.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.RemoveAt(System.Int32)">
            <summary>
            Removes a state object specified by index from the collection.
            </summary>
            <param name="index">The position in the collection of the item to remove.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpApplicationStateMock.Set(System.String,System.Object)">
            <summary>
            Updates the value of an object in the collection.
            </summary>
            <param name="name">The name of the object to update.</param>
            <param name="value">The updated value of the object.</param>
        </member>
        <member name="P:Kelp.HttpMock.HttpApplicationStateMock.AllKeys">
            <summary>
            Gets the access keys for the objects in the collection.
            </summary>
            <returns>An array of state object keys.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpApplicationStateMock.Count">
            <summary>
            Gets the number of objects in the collection.
            </summary>
            <returns>The number of objects in the collection.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpApplicationStateMock.Item(System.Int32)">
            <summary>
            Gets a state object by index.
            </summary>
            <param name="index">The index of the object to get</param>
            <returns>The object referenced by <paramref name="index"/>.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpApplicationStateMock.Item(System.String)">
            <summary>
            Gets a state object by name.
            </summary>
            <param name="name">The name of the object to get</param>
            <returns>The object referenced by <paramref name="name"/>.</returns>
        </member>
        <member name="T:Kelp.HttpMock.HttpCachePolicyMock">
            <summary>
            Provides a class for mocking an <code>HttpCachePolicyBase</code>. 
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpCachePolicyMock.SetCacheability(System.Web.HttpCacheability)">
            <summary>
            Sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability"/> value.
            </summary>
            <param name="cacheability">The <see cref="T:System.Web.HttpCacheability"/> enumeration value to set the 
            header to.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpCachePolicyMock.SetLastModified(System.DateTime)">
            <summary>
            Sets the last modified date.
            </summary>
            <param name="lastModified">The last modification date.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpCachePolicyMock.SetETag(System.String)">
            <summary>
            Sets the ETag HTTP header to the specified string.
            </summary>
            <param name="etag">The text to use for the ETag header.</param>
        </member>
        <member name="T:Kelp.HttpMock.HttpContextMock">
            <summary>
            Provides a class for mocking an <code>HttpContextBase</code>. 
            </summary>
        </member>
        <member name="F:Kelp.HttpMock.HttpContextMock.DefaultIdentityName">
            <summary>
            Gets the username associated with this instance's <see cref="T:Kelp.HttpMock.PrincipalMock"/>.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpContextMock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpContextMock"/> class.
            </summary>
            <param name="url">The URL of the mocked context's request.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpContextMock.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpContextMock"/> class.
            </summary>
            <param name="url">The URL of the mocked context's request.</param>
            <param name="requestType">The request type of the mocked context's request.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpContextMock.#ctor(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpContextMock"/> class.
            </summary>
            <param name="url">The URL of the mocked context's request.</param>
            <param name="requestType">The request type of the mocked context's request.</param>
            <param name="mapPath">The function to use for mapping server paths.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpContextMock.#ctor(System.String,System.String,System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpContextMock"/> class.
            </summary>
            <param name="url">The URL of the mocked context's request.</param>
            <param name="physicalPath">The physical path of the mocked context's request.</param>
            <param name="appPath">The application path of the mocked context.</param>
            <param name="physicalAppPath">The physical application path of the mocked context.</param>
            <param name="mapPath">The function to use for mapping server paths.</param>
        </member>
        <member name="P:Kelp.HttpMock.HttpContextMock.Application">
            <summary>
            Gets the <see cref="T:System.Web.HttpApplicationState"/> object for the current HTTP request.
            </summary>
            <returns>The application state object for the current HTTP request.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpContextMock.Request">
            <summary>
            Gets the <see cref="T:System.Web.HttpRequest"/> object for the current HTTP request.
            </summary>
            <returns>The current HTTP request.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpContextMock.Cache">
            <summary>
            Gets the <see cref="P:Kelp.HttpMock.HttpContextMock.Cache"/> object for the current application domain.
            </summary>
            <returns>The cache for the current application domain.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpContextMock.Server">
            <summary>
            Gets the <see cref="T:System.Web.HttpServerUtility"/> object that provides methods that are used when Web requests are being processed.
            </summary>
            <returns>The server utility object for the current HTTP request.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpContextMock.Response">
            <summary>
            Gets the <see cref="T:System.Web.HttpResponse"/> object for the current HTTP response.
            </summary>
            <returns>The current HTTP response.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpContextMock.Session">
            <summary>
            Gets the <see cref="T:System.Web.SessionState.HttpSessionState"/> object for the current HTTP request.
            </summary>
            <returns>The session-state object for the current HTTP request.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpContextMock.User">
            <summary>
            Gets or sets security information for the current HTTP request.
            </summary>
            <returns>An object that contains security information for the current HTTP request.</returns>
        </member>
        <member name="T:Kelp.HttpMock.HttpRequestMock">
            <summary>
            Mocks an <see cref="T:System.Web.HttpRequest"/>, enabling testing and independent execution of web context dependent code.
            </summary>
        </member>
        <member name="F:Kelp.HttpMock.HttpRequestMock.DefaultUrlScheme">
            <summary>
            Defines the default scheme to use for completing urls that don't provide one.
            </summary>
        </member>
        <member name="F:Kelp.HttpMock.HttpRequestMock.DefaultServerName">
            <summary>
            Defines the default server name to use for completing urls that don't provide one.
            </summary>
        </member>
        <member name="F:Kelp.HttpMock.HttpRequestMock.DefaultApplicationPath">
            <summary>
            Defines the default application path to use for constructing instances whose constructor doesn't provide one.
            </summary>
        </member>
        <member name="F:Kelp.HttpMock.HttpRequestMock.DefaultPhysicalApplicationPath">
            <summary>
            Defines the default physical application path to use for constructing instances whose constructor doesn't provide one.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpRequestMock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpRequestMock"/> class.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpRequestMock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpRequestMock"/> class, using the specified <paramref name="url"/>.
            </summary>
            <param name="url">The URL of the mocked request.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpRequestMock.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpRequestMock"/> class, using the specified request URL, application path
            and absolute application path.
            </summary>
            <param name="url">The URL of the mocked request.</param>
            <param name="physicalPath">The physical path of the request.</param>
            <param name="appPath">The application path of the mocked request.</param>
            <param name="physicalAppPath">The absolute application path of the mocked request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="url"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.ApplicationPath">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.AppRelativeCurrentExecutionFilePath">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.Cookies">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.Form">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.HttpMethod">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.QueryString">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.Path">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.PathInfo">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.PhysicalApplicationPath">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.PhysicalPath">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.RawUrl">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.RequestType">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.ServerVariables">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.Url">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.UrlReferrer">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.UserHostAddress">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpRequestMock.UserAgent">
            <inheritdoc/>
        </member>
        <member name="T:Kelp.HttpMock.HttpResponseMock">
            <summary>
            Provides a class for mocking an <code>HttpResponseBase</code>. 
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpResponseMock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpResponseMock"/> class.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpResponseMock.Write(System.String)">
            <summary>
            Writes the specified string to the HTTP response output stream.
            </summary>
            <param name="s">The string to write to the HTTP output stream.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpResponseMock.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Kelp.HttpMock.HttpResponseMock.AddHeader(System.String,System.String)">
            <summary>
            Adds an HTTP header to the current response. This method is provided for compatibility with earlier versions of ASP.
            </summary>
            <param name="name">The name of the HTTP header to add <paramref name="value"/> to.</param>
            <param name="value">The string to add to the header.</param>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.Output">
            <summary>
            Gets the object that enables text output to the HTTP response stream.
            </summary>
            <returns>An object that enables output to the client.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.StatusCode">
            <summary>
            Gets or sets the HTTP status code of the output that is returned to the client.
            </summary>
            <returns>The status code of the HTTP output that is returned to the client. For information about 
            valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.Status">
            <summary>
            Gets or sets the Status value that is returned to the client.
            </summary>
            <returns>The status of the HTTP output. For information about valid status codes, see HTTP Status Codes 
            on the MSDN Web site.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.StatusDescription">
            <summary>
            Gets or sets the HTTP status message of the output that is returned to the client.
            </summary>
            <returns>The status message of the HTTP output that is returned to the client. For information about 
            valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.ContentType">
            <summary>
            Gets or sets the HTTP MIME type of the current response.
            </summary>
            <returns>The HTTP MIME type of the current response. </returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.ContentEncoding">
            <summary>
            Gets or sets the content encoding of the current response.
            </summary>
            <returns>Information about the content encoding of the current response.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.Headers">
            <summary>
            Gets the collection of response headers.
            </summary>
            <returns>The response headers.</returns>
        </member>
        <member name="P:Kelp.HttpMock.HttpResponseMock.Cache">
            <summary>
            Gets the caching policy (such as expiration time, privacy settings, and vary clauses) of the current 
            Web page.
            </summary>
            <returns>The caching policy of the current response.</returns>
        </member>
        <member name="T:Kelp.HttpMock.HttpServerUtilitityMock">
            <summary>
            Provides a class for mocking an <code>HttpServerUtilityBase</code>. 
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpServerUtilitityMock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpServerUtilitityMock"/> class.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpServerUtilitityMock.#ctor(System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpServerUtilitityMock"/> class.
            </summary>
            <param name="pathMapper">The function to use when calling <code>Server.MapPath</code>.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpServerUtilitityMock.MapPath(System.String)">
            <summary>
            Returns the physical file path that corresponds to the specified virtual path on the Web server.
            </summary>
            <param name="path">The virtual path to get the physical path for.</param>
            <returns>
            The physical file path that corresponds to <paramref name="path"/>.
            </returns>
        </member>
        <member name="T:Kelp.HttpMock.HttpSessionStateMock">
            <summary>
            Mocks an <see cref="T:System.Web.SessionState.HttpSessionState"/>, enabling testing and independent execution of web context dependent code.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.HttpSessionStateMock.#ctor(System.Web.SessionState.SessionStateItemCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.HttpSessionStateMock"/> class, using the specified session item collection.
            </summary>
            <param name="sessionItems">The session items.</param>
        </member>
        <member name="M:Kelp.HttpMock.HttpSessionStateMock.Add(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Kelp.HttpMock.HttpSessionStateMock.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Kelp.HttpMock.HttpSessionStateMock.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpSessionStateMock.Count">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpSessionStateMock.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpSessionStateMock.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.HttpMock.HttpSessionStateMock.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Kelp.HttpMock.IdentityMock">
            <summary>
            Provides a class for mocking the <see cref="T:System.Security.Principal.IIdentity"/>. 
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.IdentityMock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.IdentityMock"/> class using the specified 
            <paramref name="userName"/>.
            </summary>
            <param name="userName">The user name associated with the identity being mocked.</param>
        </member>
        <member name="P:Kelp.HttpMock.IdentityMock.AuthenticationType">
            <summary>
            Gets the type of authentication used.
            </summary>
        </member>
        <member name="P:Kelp.HttpMock.IdentityMock.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user has been authenticated.
            </summary>
            <returns>true if the user was authenticated; otherwise, false.</returns>
        </member>
        <member name="P:Kelp.HttpMock.IdentityMock.Name">
            <summary>
            Gets the name of the current user.
            </summary>
            <returns>The name of the user on whose behalf the code is running.</returns>
        </member>
        <member name="T:Kelp.HttpMock.PrincipalMock">
            <summary>
            Provides a class for mocking an <code>IPrincipal</code>. 
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.PrincipalMock.#ctor(System.Security.Principal.IIdentity,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.PrincipalMock"/> class.
            </summary>
            <param name="identity">The identity of the principal.</param>
            <param name="roles">The roles of the principal.</param>
        </member>
        <member name="M:Kelp.HttpMock.PrincipalMock.IsInRole(System.String)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="P:Kelp.HttpMock.PrincipalMock.Identity">
            <summary>
            Gets the identity of the current principal.
            </summary>
            <returns>The <see cref="T:System.Security.Principal.IIdentity"/> object associated with the current principal.</returns>
        </member>
        <member name="T:Kelp.HttpMock.RequestContextMock">
            <summary>
            Mocks aRequestContext, enabling testing and independent execution of web context dependent code.
            </summary>
        </member>
        <member name="M:Kelp.HttpMock.RequestContextMock.#ctor(System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.RequestContextMock"/> class, using the specified HTTP context.
            </summary>
            <param name="httpContext">An object containing information about the HTTP request.</param>
        </member>
        <member name="M:Kelp.HttpMock.RequestContextMock.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.HttpMock.RequestContextMock"/> class, using the specified HTTP context and route data.
            </summary>
            <param name="httpContext">An object containing information about the HTTP request.</param>
            <param name="routeData">An object containing information about the route that matched the current request.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="httpContext"/> or <paramref name="routeData"/> is null.
            </exception>
        </member>
        <member name="T:Kelp.Http.HttpProxy">
            <summary>
            Provides a class that makes an HTTP request and returns <see cref="T:Kelp.Http.HttpResult"/> instances.
            </summary>
        </member>
        <member name="M:Kelp.Http.HttpProxy.Fetch(System.String)">
            <summary>
            Fetches the specified URL, and returns a <see cref="T:Kelp.Http.HttpResult"/> initialized around the result.
            </summary>
            <param name="url">The URL to fetch.</param>
            <returns>A <see cref="T:Kelp.Http.HttpResult"/> initialized around the result of fetching the URL</returns>
        </member>
        <member name="M:Kelp.Http.HttpProxy.Fetch(System.String,System.String)">
            <summary>
            Fetches the specified URL, and returns a <see cref="T:Kelp.Http.HttpResult"/> initialized around the result.
            </summary>
            <param name="url">The URL to fetch.</param>
            <param name="proxifyUrl">If not <c>null</c> and the response returned HTML or CSS, the
            response text will be further processed to make sure any external references will be converted
            to the specified proxify URL.</param>
            <returns>
            A <see cref="T:Kelp.Http.HttpResult"/> initialized around the result of fetching the URL
            </returns>
        </member>
        <member name="T:Kelp.Http.HttpResult">
            <summary>
            Represents the result from requesting a file over HTTP.
            </summary>
        </member>
        <member name="M:Kelp.Http.HttpResult.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Http.HttpResult"/> class, using the specified
            <paramref name="response"/>.
            </summary>
            <param name="response">The response recieved from requesting a file over HTTP.</param>
        </member>
        <member name="P:Kelp.Http.HttpResult.IsTextResponse">
            <summary>
            Gets a value indicating whether this instance represents a text response.
            </summary>
            <value>
            	<c>true</c> if this instance represents a text response; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kelp.Http.HttpResult.IsHtmlResponse">
            <summary>
            Gets a value indicating whether this instance represents an HTML text response.
            </summary>
            <value>
            	<c>true</c> if this instance represents an HTML text response; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kelp.Http.HttpResult.ContentType">
            <summary>
            Gets the content type of this instance.
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.Charset">
            <summary>
            Gets the charset of this instance.
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.Encoding">
            <summary>
            Gets the encoding of this instance.
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.Length">
            <summary>
            Gets the length (in bytes) of this instance.
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.Text">
            <summary>
            Gets the text of this instance (if the result is a text result).
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.Data">
            <summary>
            Gets the binary data of this instance (if the result is a binary result).
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.Uri">
            <summary>
            Gets the Uri of the Internet resource that responded to this request. 
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.ResponseHeaders">
            <summary>
            Gets the headers that are associated with this response from the server.
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.StatusCode">
            <summary>
            Gets the response status of this result
            </summary>
        </member>
        <member name="P:Kelp.Http.HttpResult.StatusDescription">
            <summary>
            Gets the response status description of this result.
            </summary>
        </member>
        <member name="F:Kelp.Http.Util.MaxDifferenceCachedDate">
            <summary>
            Specifies the maximum time difference (in seconds) between the current and the cached files that
            will still be allowed for the files to still be considered equal.
            </summary>
        </member>
        <member name="M:Kelp.Http.Util.SendNotModified(System.Web.HttpContextBase)">
            <summary>
            Sends the not-modified status to the browser.
            </summary>
            <param name="context">The context under which this code is executing.</param>
        </member>
        <member name="M:Kelp.Http.Util.GetDateLastModified(System.String)">
            <summary>
            Gets the last-modified datetime of the specified file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>the last-modified datetime of the specified file</returns>
            <remarks>
            The latest of the <em>LastWriteTime</em> and <em>CreationTime</em> is used
            </remarks>
        </member>
        <member name="M:Kelp.Http.Util.GetDateLastModified(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the last-modified datetime of a list of files.
            </summary>
            <param name="files">The files.</param>
            <returns>The latest last-modified datetime of the <paramref name="files"/> list.</returns>
        </member>
        <member name="T:Kelp.Imaging.FilterSequence">
            <summary>
            Provides a container for a list of filters that can be applied as one.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.IFilter">
            <summary>
            Represents a bitmap filter.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.IFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>The filtered bitmap.</returns>
        </member>
        <member name="M:Kelp.Imaging.FilterSequence.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies all filters constituent in this filter sequence.
            </summary>
            <param name="source">The source bitmap to apply the filters on.</param>
            <returns>The new bitmap with filters applied</returns>
        </member>
        <member name="T:Kelp.Imaging.Filters.BaseFilter">
            <summary>
            Provides a base class for <see cref="T:Kelp.Imaging.IFilter"/> implementations.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.BaseFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies this filter to the specified input image.
            </summary>
            <param name="inputImage">The image to filter.</param>
            <returns>A new bitmap containing the filtered <paramref name="inputImage"/>.</returns>
        </member>
        <member name="M:Kelp.Imaging.Filters.BaseFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Applies this filter to the specified input image data.
            </summary>
            <param name="imageData">The image data of the image to filter.</param>
            <returns>A new bitmap containing the filtered <paramref name="imageData"/>.</returns>
        </member>
        <member name="T:Kelp.Imaging.Filters.BrightnessMatrix">
            <summary>
            Matrix based brightness adjusting filter.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.Filters.MatrixFilter">
            <summary>
            Represents a filter that uses a matrix to modify a bitmap.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.MatrixFilter.IsGraphicsSupported(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Determines whether the specified <paramref name="format"/> is supported by the <see cref="T:Kelp.Imaging.Filters.MatrixFilter"/> 
            class
            </summary>
            <param name="format">The format to check.</param>
            <returns>
            <c>true</c> if the specified <paramref name="format"/> is supported by the <see cref="T:Kelp.Imaging.Filters.MatrixFilter"/> 
            class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kelp.Imaging.Filters.MatrixFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the current filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>The filtered bitmap.</returns>
        </member>
        <member name="P:Kelp.Imaging.Filters.MatrixFilter.Matrix">
            <summary>
            Gets or sets the matrix associated with this <see cref="T:Kelp.Imaging.Filters.MatrixFilter"/>.
            </summary>
            <value>
            The matrix.
            </value>
        </member>
        <member name="P:Kelp.Imaging.Filters.MatrixFilter.Range">
            <summary>
            Gets or sets the value range associated with this filter.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.BrightnessMatrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.BrightnessMatrix"/> class, setting the percentage to 20.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.BrightnessMatrix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.BrightnessMatrix"/> class with the specified 
            <paramref name="percent"/> brightness.
            </summary>
            <param name="percent">The percent of brightness this filter should apply.</param>
        </member>
        <member name="T:Kelp.Imaging.Filters.ColorBalance">
            <summary>
            Implements a filter that manipulates the red, green and blue components of a bitmap.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.ColorBalance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.ColorBalance"/> class.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.ColorBalance.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.ColorBalance"/> class.
            </summary>
            <param name="red">The red balance value.</param>
            <param name="green">The green balance value.</param>
            <param name="blue">The blue balance value.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.ColorBalance.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the color adjustment to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>The filtered bitmap.</returns>
        </member>
        <member name="P:Kelp.Imaging.Filters.ColorBalance.Red">
            <summary>
            Gets or sets the red balance value of this filter.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.ColorBalance.Green">
            <summary>
            Gets or sets the green balance value of this filter.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.ColorBalance.Blue">
            <summary>
            Gets or sets the blue balance value of this filter.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.ColorSpace">
            <summary>
            Provides utility methods for working with colors.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.Filters.ContrastMatrix">
            <summary>
            Matrix based contrast adjusting filter.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.ContrastMatrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.ContrastMatrix"/> class, setting the percentage to 20.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.ContrastMatrix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.ContrastMatrix"/> class with the specified 
            <paramref name="percent"/> brightness.
            </summary>
            <param name="percent">The percent of brightness this filter should apply.</param>
        </member>
        <member name="T:Kelp.Imaging.Filters.Crop">
            <summary>
            Implements a crop filter.
            </summary>
            <remarks>This class is just a wrapper around the AForge's crop filter.</remarks>
        </member>
        <member name="M:Kelp.Imaging.Filters.Crop.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.Crop"/> class.
            </summary>
            <param name="rect">The rectangle to crop the images to.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.Crop.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>
            The filtered bitmap.
            </returns>
        </member>
        <member name="T:Kelp.Imaging.Filters.GammaMatrix">
            <summary>
            Matrix based gamma adjusting filter.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.GammaMatrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.GammaMatrix"/> class, setting the percentage to 20.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.GammaMatrix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.GammaMatrix"/> class with the specified 
            <paramref name="percent"/> brightness.
            </summary>
            <param name="percent">The percent of brightness this filter should apply.</param>
        </member>
        <member name="T:Kelp.Imaging.Filters.GaussianSharpen">
            <summary>
            Implements a gaussian sharpen filter.
            </summary>
            <remarks>This class is just a wrapper around the AForge's GaussianSharpen filter.</remarks>
        </member>
        <member name="M:Kelp.Imaging.Filters.GaussianSharpen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.GaussianSharpen"/> class.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.GaussianSharpen.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.GaussianSharpen"/> class.
            </summary>
            <param name="sigma">The sigma of the sharpness.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.GaussianSharpen.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.GaussianSharpen"/> class.
            </summary>
            <param name="sigma">The sigma of the sharpness.</param>
            <param name="size">The size of the sharpness.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.GaussianSharpen.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>
            The filtered bitmap.
            </returns>
        </member>
        <member name="T:Kelp.Imaging.Filters.GrayscaleMatrix">
            <summary>
            Matrix based grayscale filter.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.GrayscaleMatrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.GrayscaleMatrix"/> class.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.Filters.HSLFilter">
            <summary>
            Implements a HSL filter.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.HSLFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.HSLFilter"/> class.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.HSLFilter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.HSLFilter"/> class.
            </summary>
            <param name="hue">The hue value of the filter.</param>
            <param name="saturation">The saturation value of the filter.</param>
            <param name="lightness">The lightness value of the filter.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.HSLFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>
            The filtered bitmap.
            </returns>
        </member>
        <member name="P:Kelp.Imaging.Filters.HSLFilter.Hue">
            <summary>
            Gets or sets the hue of the filter.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.HSLFilter.Saturation">
            <summary>
            Gets or sets the saturation of the filter.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.HSLFilter.Lightness">
            <summary>
            Gets or sets the lightness of the filter.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.HSLValue">
            <summary>
            Represents a HSL value.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.HSLValue.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.HSLValue"/> class.
            </summary>
            <param name="hue">The hue value of the filter.</param>
            <param name="saturation">The saturation value of the filter.</param>
            <param name="luminance">The luminance value of the filter.</param>
        </member>
        <member name="M:Kelp.Imaging.HSLValue.FromRGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets a new <see cref="T:Kelp.Imaging.HSLValue"/> instance corresponding to the specified RGB values.
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
            <returns>A new <see cref="T:Kelp.Imaging.HSLValue"/> instance corresponding to the specified RGB values</returns>
        </member>
        <member name="M:Kelp.Imaging.HSLValue.FromRGB(System.Drawing.Color)">
            <summary>
            Gets a new <see cref="T:Kelp.Imaging.HSLValue"/> instance corresponding to the specified RGB color.
            </summary>
            <param name="color">The source RGB color ot use.</param>
            <returns>A new <see cref="T:Kelp.Imaging.HSLValue"/> instance corresponding to the specified RGB color.</returns>
        </member>
        <member name="P:Kelp.Imaging.HSLValue.Hue">
            <summary>
            Gets or sets the hue of the filter.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.HSLValue.Saturation">
            <summary>
            Gets or sets the saturation of the filter.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.HSLValue.Luminance">
            <summary>
            Gets or sets the luminance of the filter.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.HSLValue.RGB">
            <summary>
            Gets the RGB value corresponding to the HSL valus this instance represents.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.Filters.MirrorH">
            <summary>
            Implements a horizontal flip filter
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.MirrorH.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>
            The filtered bitmap.
            </returns>
        </member>
        <member name="T:Kelp.Imaging.Filters.MirrorV">
            <summary>
            Implements a vertical flip filter
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.MirrorV.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>
            The filtered bitmap.
            </returns>
        </member>
        <member name="T:Kelp.Imaging.Filters.ResampleFitType">
            <summary>
            Defines the different fit types
            </summary>
        </member>
        <member name="F:Kelp.Imaging.Filters.ResampleFitType.ToMaximums">
            <summary>
            Signifies that resampling should fit the image to within the maximum available dimensions.
            </summary>
        </member>
        <member name="F:Kelp.Imaging.Filters.ResampleFitType.ToMinimums">
            <summary>
            Signifies that resampling should fit the image to within the minimum available dimensions.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.Filters.Resample">
            <summary>
            Implements a resample filter
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.Resample.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.Resample"/> class.
            </summary>
            <param name="width">The target width of the image.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.Resample.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.Resample"/> class.
            </summary>
            <param name="width">The target width of the image.</param>
            <param name="height">The target height of the image.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.Resample.#ctor(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.Resample"/> class.
            </summary>
            <param name="width">The target width of the image.</param>
            <param name="height">The target height of the image.</param>
            <param name="interpolation">The interpolation mode to use for resampling.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.Resample.#ctor(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.Resample"/> class.
            </summary>
            <param name="width">The target width of the image.</param>
            <param name="height">The target height of the image.</param>
            <param name="interpolation">The interpolation mode to use for resampling.</param>
            <param name="preserveRatio">if set to <c>true</c>, the resample will preserve the ration between dimensions.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.Resample.#ctor(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.Resample"/> class.
            </summary>
            <param name="width">The target width of the image.</param>
            <param name="height">The target height of the image.</param>
            <param name="interpolation">The interpolation mode to use for resampling.</param>
            <param name="preserveRatio">if set to <c>true</c>, the resample will preserve the ration between dimensions.</param>
            <param name="dontEnlarge">if set to <c>true</c>, the image will not be enlarged.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.Resample.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.Resample"/> class.
            </summary>
            <param name="width">The target width of the image.</param>
            <param name="height">The target height of the image.</param>
            <param name="preserveRatio">if set to <c>true</c>, the resample will preserve the ration between dimensions.</param>
            <param name="dontEnlarge">if set to <c>true</c>, the image will not be enlarged.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.Resample.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies the filter to the specified input <paramref name="source"/> bitmap and returns the result
            as a new bitmap.
            </summary>
            <param name="source">The source bitmap to filter.</param>
            <returns>
            The filtered bitmap.
            </returns>
        </member>
        <member name="P:Kelp.Imaging.Filters.Resample.Width">
            <summary>
            Gets or sets the target width of the image.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.Resample.Height">
            <summary>
            Gets or sets the target width of the image.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.Resample.Interpolation">
            <summary>
            Gets or sets the interpolation mode to use with resampling.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.Resample.PreserveRatio">
            <summary>
            Gets or sets a value indicating whether to preserve the ratio when resampling.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.Resample.DontEnlarge">
            <summary>
            Gets or sets a value indicating whether to disable enlargin of the image when resampling.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.Resample.FitType">
            <summary>
            Gets or sets the fit type of the resample
            </summary>
        </member>
        <member name="T:Kelp.Imaging.Filters.SepiaMatrix">
            <summary>
            Matrix based sepia adjusting filter.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.SepiaMatrix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.SepiaMatrix"/> class.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.ImageHelper">
            <summary>
            Contains various utility and helper methods.
            </summary>
        </member>
        <member name="F:Kelp.Imaging.ImageHelper.GrayBlue">
            <summary>
            Represents the gray blue color.
            </summary>
        </member>
        <member name="F:Kelp.Imaging.ImageHelper.GrayGreen">
            <summary>
            Represents the gray green color.
            </summary>
        </member>
        <member name="F:Kelp.Imaging.ImageHelper.GrayRed">
            <summary>
            Represents the gray red color.
            </summary>
        </member>
        <member name="F:Kelp.Imaging.ImageHelper.SepiaBlue">
            <summary>
            Represents the sepia blue color.
            </summary>
        </member>
        <member name="F:Kelp.Imaging.ImageHelper.SepiaGreen">
            <summary>
            Represents the sepia green color.
            </summary>
        </member>
        <member name="F:Kelp.Imaging.ImageHelper.SepiaRed">
            <summary>
            Represents the sepia red color.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetBrightnessMatrix(System.Int32)">
            <summary>
            Return the matrix for the specified brightness
            </summary>
            <param name="percent">Brightness amount</param>
            <returns>The matrix for the specified brightness</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetContrastMatrix(System.Int32)">
            <summary>
            Return a matrix for the specified contrast
            </summary>
            <param name="percent">Contrast amount</param>
            <returns>The matrix for the specified contrast</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetSaturationMatrix(System.Int32)">
            <summary>
            Return a matrix for the specified saturation
            </summary>
            <param name="percent">Saturation amount</param>
            <returns>The matrix for the specified saturation</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.AdjustBrightness(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Adjusts the image brightness by the specified <paramref name="percent"/>.
            </summary>
            <param name="image">The image to process</param>
            <param name="percent">The percentage (-100 to 100) to adjust the brightness to</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.AdjustContrast(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Adjusts the image contrast by the specified  <paramref name="percent"/>.
            </summary>
            <param name="image">The image to process</param>
            <param name="percent">The percentage (-100 to 100) to adjust the contrast to</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.AdjustSaturation(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Adjusts the image saturation by the specified  <paramref name="percent"/>.
            </summary>
            <param name="image">The image to process</param>
            <param name="percent">The percentage (-100 to 100) to adjust the saturation to</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.AdjustGamma(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Adjusts the image gamma by the specified  <paramref name="percent"/>.
            </summary>
            <param name="image">The image to process</param>
            <param name="percent">The percentage of gamma (-100 to 100) to adjust the gamma to</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.ConvertToGrayscale(System.Drawing.Bitmap)">
            <summary>
            Converts the image to grayscale
            </summary>
            <param name="image">The image to process</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.ConvertToSepia(System.Drawing.Bitmap)">
            <summary>
            Converts the image to sepia
            </summary>
            <param name="image">The image to process</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.AdjustUsingCustomMatrix(System.Drawing.Bitmap,System.Single[][])">
            <summary>
            Adjusts the image using a custom matrix
            </summary>
            <param name="image">The image to process</param>
            <param name="matrix">The custom matrix</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.Rotate(System.Drawing.Bitmap,System.Drawing.RotateFlipType)">
            <summary>
            Rotates the image using the built-in RotateFlip method
            </summary>
            <param name="image">The image to rotate</param>
            <param name="flipType">How to rotate the image</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Returns a part of the bitmap specified with a rectangle.
            </summary>
            <param name="image">The image to crop.</param>
            <param name="cropArea">Rectangle specifying the area to crop to.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.Crop(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a part of the bitmap as specified with the parameters that make up the rectangle.
            </summary>
            <param name="image">The image to crop.</param>
            <param name="x">The rectangle's top left coordinate's x component.</param>
            <param name="y">The rectangle's top left coordinate's y component.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.Resize(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Resizes the specified <paramref name="image"/> to the square calculated using the 
            <paramref name="longestSide"/> argument.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="longestSide">The length of the longest side to adjust to</param>
            <returns>The resized image</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.Resize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resizes the specified <paramref name="image"/> to the specified <paramref name="width"/> and 
            <paramref name="height"/>
            </summary>
            <param name="image">The image to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <returns>The resized image</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.CombineMatrixes(System.Single[][],System.Single[][])">
            <summary>
            Return a matrix that is the combination of the two specified matrixes,
            maintains the order information of the matrix
            </summary>
            <param name="m1">The first matrix to combine</param>
            <param name="m2">The second matrix to combine</param>
            <returns>Matrix that is the combination of the two specified matrixes</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetEncoderInfo(System.String)">
            <summary>
            Returns the encoder whose description (JPEG, BMP...) equals the supplied fileFormat string
            </summary>
            <param name="fileFormat">The encoder to retrieve</param>
            <returns>The found encoder</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetEncoderQualityParam(System.Int32)">
            <summary>
            Returns EncoderParametes populated with a single qiality 
            EncoderParameter, set to the supplied value.
            </summary>
            <param name="quality">The value of the quality encoder</param>
            <returns>The populated EncoderParameters</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.ConvertTo32bit(System.Drawing.Bitmap)">
            <summary>
            Creates a new, 32-bit version of the supplied image
            </summary>
            <param name="image">The image to covert</param>
            <returns>The new, 32-bit version of the <paramref name="image"/></returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.ConvertTo8bit(System.Drawing.Bitmap)">
            <summary>
            Creates a new, 8-bit version of the supplied image
            </summary>
            <param name="image">The image to covert</param>
            <returns>The new, 8-bit version of the <paramref name="image"/></returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.ConvertTo8bit(System.Drawing.Bitmap,System.Byte)">
            <summary>
            Creates a new, 8-bit version of the supplied image, and limiting the number of colors to
            <paramref name="maxColors"/>.
            </summary>
            <param name="image">The image to covert</param>
            <param name="maxColors">The maximum number of colors allowed in the resulting image.</param>
            <returns>The new, 8-bit version of the <paramref name="image"/></returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.IsGraphicsSupported(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns a boolean indicating weather the supplied format is supported by the Graphics class
            </summary>
            <param name="format">The format to check</param>
            <returns>True is supported</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetCodecForType(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the codec info for the specified image <paramref name="format"/>.
            </summary>
            <param name="format">The format of the image for this to get the code.</param>
            <returns>The image codec info for the specified image <paramref name="format"/>.</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetCodecForType(System.String)">
            <summary>
            Gets the codec info for the specified <paramref name="mimeType"/>.
            </summary>
            <param name="mimeType">The mime-type of the image for this to get the code.</param>
            <returns>The image codec info for the specified <paramref name="mimeType"/>.</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetSupportedCodecNames">
            <summary>
            Gets the list codecs supported on the current system.
            </summary>
            <returns>The list codecs supported on the current system.</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.GetSupportedCodecString">
            <summary>
            Gets the codecs supported on the current system joined by a linebreak in a single string.
            </summary>
            <returns>The codecs supported on the current system joined by a linebreak in a single string.</returns>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.DrawImage(System.Drawing.Bitmap,System.Single[][])">
            <summary>
            Draw the image using the specified matrix.
            </summary>
            <param name="image">The image ro process</param>
            <param name="matrix">The matrix to use</param>
        </member>
        <member name="M:Kelp.Imaging.ImageHelper.DrawImage(System.Drawing.Bitmap,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draw the image using the specified attributes
            </summary>
            <param name="image">The image to draw</param>
            <param name="attr">The attributes of the image</param>
        </member>
        <member name="P:Kelp.Imaging.ImageHelper.DefaultMatrix">
            <summary>
            Gets the default matrix for use with matrix-based filtering.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.ImageHelper.GrayscaleMatrix">
            <summary>
            Gets the grayscale matrix for use with matrix-based filtering.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.ImageHelper.SepiaMatrix">
            <summary>
            Gets the sepia matrix for use with matrix-based filtering.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.OctreeQuantizer">
            <summary>
            The octree quantizer that can be used when converting images to 8-bit.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.Quantizer">
            <summary>
            Abstract class for other quantizers.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Quantizer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Quantizer"/> class.
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:Kelp.Imaging.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:Kelp.Imaging.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:Kelp.Imaging.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:Kelp.Imaging.Quantizer.InitialQuantizePixel(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:Kelp.Imaging.Quantizer.QuantizePixel(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Kelp.Imaging.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="T:Kelp.Imaging.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory 
            </remarks>
        </member>
        <member name="F:Kelp.Imaging.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:Kelp.Imaging.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:Kelp.Imaging.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:Kelp.Imaging.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:Kelp.Imaging.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Quantizer.Color32.Color">
            <summary>
            Gets the color for this Color32 object
            </summary>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.OctreeQuantizer"/> class.
            </summary>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.InitialQuantizePixel(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.QuantizePixel(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="T:Kelp.Imaging.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.AddColor(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="color">The color to add</param>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.GetPaletteIndex(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Get the palette index for the specified <paramref name="pixel"/>
            </summary>
            <param name="pixel">The pixel whose palette index to get</param>
            <returns>The pallete indef of the specified <paramref name="pixel"/></returns>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.TrackPrevious(Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="P:Kelp.Imaging.OctreeQuantizer.Octree.Leaves">
            <summary>
            Gets or sets the number of leaves in the tree
            </summary>
        </member>
        <member name="T:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,Kelp.Imaging.OctreeQuantizer.Octree)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode"/> class.
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.AddColor(Kelp.Imaging.Quantizer.Color32*,System.Int32,System.Int32,Kelp.Imaging.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The pixel that represents the color to add</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(Kelp.Imaging.Quantizer.Color32*,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
            <param name="color">The pixel color.</param>
            <param name="level">The level - not sure about this.</param>
            <returns>The palette index of the specified pixel</returns>
        </member>
        <member name="M:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.Increment(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
            <param name="pixel">The pixel color information.</param>
        </member>
        <member name="P:Kelp.Imaging.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Gets the next reducible node
            </summary>
        </member>
        <member name="T:Kelp.Imaging.PaletteQuantizer">
            <summary>
            Provides a pelette based quantizer that can be used when converting images to 8-bit.
            </summary>
        </member>
        <member name="M:Kelp.Imaging.PaletteQuantizer.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.PaletteQuantizer"/> class.
            </summary>
            <param name="image">The image that contains the colors to use.</param>
        </member>
        <member name="M:Kelp.Imaging.PaletteQuantizer.GetImageColors(System.Drawing.Bitmap)">
            <summary>
            Creates a new ArrayList containing first up to 255 colors from the image.
            </summary>
            <param name="image">The source image</param>
            <returns>The array of colors</returns>
        </member>
        <member name="M:Kelp.Imaging.PaletteQuantizer.QuantizePixel(Kelp.Imaging.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Kelp.Imaging.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="palette">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="T:Kelp.Imaging.Filters.QueryFilter">
            <summary>
            Provides a predefined sequence of filters that can be applied to an image.
            </summary>
            <remarks>
            The filters that can be used are: 
            <list type="table">
            <listheader>
            <term>Key</term>
            <description>Filter and arguments</description>
            </listheader>
            <item><term>cp</term><description><see cref="T:Kelp.Imaging.Filters.Crop"/> (int x, int y, int width, int height)</description></item>
            <item><term>rs</term><description><see cref="T:Kelp.Imaging.Filters.Resample"/> (int width, int height, byte preserveRatio (1|0), byte dontEnlarge (1|0), byte interpolationMode (1|5|7))</description></item>
            <item><term>bt</term><description><see cref="T:Kelp.Imaging.Filters.BrightnessMatrix"/> (int amount)</description></item>
            <item><term>ct</term><description><see cref="T:Kelp.Imaging.Filters.ContrastMatrix"/> (int amount)</description></item>
            <item><term>gm</term><description><see cref="T:Kelp.Imaging.Filters.GammaMatrix"/> (int amount)</description></item>
            <item><term>hsl</term><description><see cref="T:Kelp.Imaging.Filters.HSLFilter"/> (int hue, int saturation, int lightness)</description></item>
            <item><term>rgb</term><description><see cref="T:Kelp.Imaging.Filters.ColorBalance"/> (int red, int green, int blue)</description></item>
            <item><term>se</term><description><see cref="T:Kelp.Imaging.Filters.SepiaMatrix"/> (byte 1|0)</description></item>
            <item><term>sp</term><description><see cref="T:Kelp.Imaging.Filters.GaussianSharpen"/> (byte 1|0)</description></item>
            <item><term>mh</term><description><see cref="T:Kelp.Imaging.Filters.MirrorH"/> (byte 1|0)</description></item>
            <item><term>mv</term><description><see cref="T:Kelp.Imaging.Filters.MirrorV"/> (byte 1|0)</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Kelp.Imaging.Filters.QueryFilter.filters">
            <summary>
            Collection of bitmap filters that this controller can use
            </summary>
        </member>
        <member name="M:Kelp.Imaging.Filters.QueryFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> class, using the specified 
            <paramref name="query"/> string to initialize it's filters.
            </summary>
            <param name="query">The query that specifies the filters to use.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.QueryFilter.#ctor(Kelp.Core.QueryString)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> class, using the specified 
            <paramref name="query"/> to initialize it's filters.
            </summary>
            <param name="query">The query that specifies the filters to use.</param>
        </member>
        <member name="M:Kelp.Imaging.Filters.QueryFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Applies all filters in the current <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> to the specified input image, and returns
            a new image.
            </summary>
            <param name="inputImage">The input image to process.</param>
            <returns>A new image with current <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> filters applied to the 
            <paramref name="inputImage"/>. If current <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> is empty, the original image is
            returned.</returns>
        </member>
        <member name="P:Kelp.Imaging.Filters.QueryFilter.Query">
            <summary>
            Gets the <see cref="T:Kelp.Core.QueryString"/> associated with this <see cref="T:Kelp.Imaging.Filters.QueryFilter"/>.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.Filters.QueryFilter.Filters">
            <summary>
            Gets the <see cref="T:Kelp.Imaging.FilterSequence"/> associated with this <see cref="T:Kelp.Imaging.Filters.QueryFilter"/>.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.IntRange">
            <summary>
            Represents an integer range with min and max values
            </summary>
        </member>
        <member name="M:Kelp.Imaging.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.IntRange"/> struct.
            </summary>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
        </member>
        <member name="M:Kelp.Imaging.IntRange.GetValue(System.Int32)">
            <summary>
            Returns the specified <paramref name="value"/> if it falls in range, otherwise either tha 
            <see cref="P:Kelp.Imaging.IntRange.Min"/> or the <see cref="P:Kelp.Imaging.IntRange.Max"/> value, depending on whether the value was too large or too
            small.
            </summary>
            <param name="value">The input value.</param>
            <returns>The value that is in range</returns>
        </member>
        <member name="M:Kelp.Imaging.IntRange.GetValue(System.Int32,System.Decimal)">
            <summary>
            Converts the specified <paramref name="value"/> to a value in range and multiplies it with the specified 
            <paramref name="multiplier"/>.
            </summary>
            <param name="value">The input value.</param>
            <param name="multiplier">The value to multiply the ranged <paramref name="value"/> with.</param>
            <returns>The value that is in range, multiplied with the specified <paramref name="multiplier"/>.</returns>
        </member>
        <member name="P:Kelp.Imaging.IntRange.Min">
            <summary>
            Gets the minimum value in the range.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.IntRange.Max">
            <summary>
            Gets the maximum value in the range.
            </summary>
        </member>
        <member name="T:Kelp.Imaging.DoubleRange">
            <summary>
            Represents a double range with min and max values
            </summary>
        </member>
        <member name="M:Kelp.Imaging.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.Imaging.DoubleRange"/> struct.
            </summary>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
        </member>
        <member name="P:Kelp.Imaging.DoubleRange.Min">
            <summary>
            Gets the minimum value in the range.
            </summary>
        </member>
        <member name="P:Kelp.Imaging.DoubleRange.Max">
            <summary>
            Gets the maximum value in the range.
            </summary>
        </member>
        <member name="T:Kelp.ResourceHandling.GifFile">
            <summary>
            Represents a GIF <see cref="T:Kelp.ResourceHandling.ImageFile"/>
            </summary>
        </member>
        <member name="T:Kelp.ResourceHandling.ImageFile">
            <summary>
            Represents an image file resource.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.ImageFile.filter">
            <summary>
            The <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> associated with the current <see cref="T:Kelp.ResourceHandling.ImageFile"/>.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.ImageFile.parameters">
            <summary>
            The <see cref="T:Kelp.Core.QueryString"/> associated with the current <see cref="T:Kelp.ResourceHandling.ImageFile"/>.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.ImageFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.ImageFile"/> class.
            </summary>
            <param name="absolutePath">The absolute path of the image.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.ImageFile.Create(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Creates <see cref="T:Kelp.ResourceHandling.ImageFile"/> instances matching the specified absolute path by extension..
            </summary>
            <param name="absolutePath">The absolute path of the image.</param>
            <param name="parameters">The query string parameters of the <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> associated 
            with the <see cref="T:Kelp.ResourceHandling.ImageFile"/> that will be created.</param>
            <param name="mappingFunction">The mapping function to use when resolving temporary directory location.</param>
            <returns>A new <see cref="T:Kelp.ResourceHandling.ImageFile"/> instance matching the specified absolute path by extension.</returns>
        </member>
        <member name="M:Kelp.ResourceHandling.ImageFile.Create(System.String,Kelp.Core.QueryString,System.Func{System.String,System.String})">
            <summary>
            Creates <see cref="T:Kelp.ResourceHandling.ImageFile"/> instances matching the specified absolute path by extension..
            </summary>
            <param name="absolutePath">The absolute path of the image.</param>
            <param name="parameters">The query string parameters of the <see cref="T:Kelp.Imaging.Filters.QueryFilter"/> associated 
            with the <see cref="T:Kelp.ResourceHandling.ImageFile"/> that will be created.</param>
            <param name="mappingFunction">The mapping function to use when resolving temporary directory location.</param>
            <returns>A new <see cref="T:Kelp.ResourceHandling.ImageFile"/> instance matching the specified absolute path by extension.</returns>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.Bytes">
            <summary>
            Gets the contents of this image as a byte stream.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.MapPath">
            <summary>
            Gets the delegate method that handles resolving (mapping) or relative paths.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.Filter">
            <summary>
            Gets the query filter associated with this image.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.CacheDirectory">
            <summary>
            Gets the temporary directory in which to store the processed version of this image file instance.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.CacheName">
            <summary>
            Gets the physical file name of the processed and cached version of this image file instance.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.CachePath">
            <summary>
            Gets the physical file path of the processed and cached version of this image file instance.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.ContentType">
            <summary>
            Gets the the content type associated with this image file instance.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.LastModified">
            <summary>
            Gets the modificaition date of this image file instance.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.UseCache">
            <summary>
            Gets or sets a value indicating whether to use cache with this image file instance
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.CodecInfo">
            <summary>
            Gets the codec info to use when saving this image file instance.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.ImageFile.CodecParameters">
            <summary>
            Gets the encode parameters to use when saving this image file instance.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.GifFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.GifFile"/> class.
            </summary>
            <param name="absolutePath">The absolute path of the image.</param>
        </member>
        <member name="P:Kelp.ResourceHandling.GifFile.CodecInfo">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.ResourceHandling.GifFile.CodecParameters">
            <inheritdoc/>
        </member>
        <member name="T:Kelp.ResourceHandling.JpegFile">
            <summary>
            Represents a JPEG <see cref="T:Kelp.ResourceHandling.ImageFile"/>
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.JpegFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.JpegFile"/> class.
            </summary>
            <param name="absolutePath">The absolute path of the image.</param>
        </member>
        <member name="P:Kelp.ResourceHandling.JpegFile.CodecInfo">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.ResourceHandling.JpegFile.CodecParameters">
            <inheritdoc/>
        </member>
        <member name="T:Kelp.ResourceHandling.LastModifiedDateCache">
            <summary>
            Provides shared database of file modification dates.
            </summary>
            <remarks>
            ASP.NET caching mechanism is used as a database store, because it provides neat file modification based cache
            dependency which will automatically expire a key if a file changes.
            </remarks>
        </member>
        <member name="M:Kelp.ResourceHandling.LastModifiedDateCache.Get(System.Web.HttpContextBase,System.String)">
            <summary>
            Gets the last modified date and time from cache.
            </summary>
            <param name="context">The context; for accessing the cache.</param>
            <param name="relativePath">The relative path of the file.</param>
            <returns>
            The last modified date and time as present in the cache
            </returns>
            <remarks>
            If the no entry for the relative path can be found in the cache, a 1-1-0001 0:00:00 date is returned which is really old
            </remarks>
        </member>
        <member name="M:Kelp.ResourceHandling.LastModifiedDateCache.Remove(System.Web.HttpContextBase,System.String)">
            <summary>
            Removes the last modified date and time entry from cache for a particular  <paramref name="relativePath"/>.
            </summary>
            <param name="context">The context; for accessing the cache.</param>
            <param name="relativePath">The relative path.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.LastModifiedDateCache.Store(System.Web.HttpContextBase,System.String,System.DateTime,System.String[])">
            <summary>
            Puts the last modified date and time in cache for a particular <paramref name="relativePath"/>.
            </summary>
            <param name="context">The context; for accessing the cache.</param>
            <param name="relativePath">The relative path.</param>
            <param name="lastModified">The last modified.</param>
            <param name="fileDependencies">The file dependencies.</param>
            <remarks>
            when supplying file dependencies, the cache entry is automatically removed if one of these files change on disk
            </remarks>
        </member>
        <member name="T:Kelp.ResourceHandling.CodeFile">
            <summary>
            Represents a code file that may include other code files.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.CodeFile.parent">
            <summary>
            A reference to the including (parent) <see cref="T:Kelp.ResourceHandling.CodeFile"/> class, if this file 
            was included from another.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.CodeFile.content">
            <summary>
            The file's fully processed source code.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.CodeFile.rawContent">
            <summary>
            The file's raw source code.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.CodeFile"/> class.
            </summary>
            <param name="absolutePath">The physical path of this code file.</param>
            <param name="relativePath">The relative path of this code file.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.#ctor(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.CodeFile"/> class.
            </summary>
            <param name="absolutePath">The physical path of this code file.</param>
            <param name="relativePath">The relative path of this code file.</param>
            <param name="mappingFunction">The delegate method that handles resolving (mapping) or relative paths.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.#ctor(System.String,System.String,Kelp.ResourceHandling.CodeFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.CodeFile"/> class.
            </summary>
            <param name="absolutePath">The physical path of this code file.</param>
            <param name="relativePath">The relative path of this code file.</param>
            <param name="parent">The script processor creating this instance (used when processing includes)</param>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.Create(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Kelp.ResourceHandling.CodeFile"/> for the specified <paramref name="absolutePath"/> and <paramref name="relativePath"/>
            </summary>
            <param name="absolutePath">The physical path of this code file.</param>
            <param name="relativePath">The relative path of this code file.</param>
            <returns>A code file appropriate for the specified <paramref name="absolutePath"/> and <paramref name="relativePath"/>
            If the extension of the specified <paramref name="absolutePath"/> is <c>css</c>, the resulting value will be a 
            new <see cref="T:Kelp.ResourceHandling.CssFile"/>. In all other cases the resulting value is a <see cref="T:Kelp.ResourceHandling.ScriptFile"/>.</returns>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.Create(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Creates a code file for the specified <paramref name="absolutePath"/>.
            </summary>
            <param name="absolutePath">The physical path of this code file.</param>
            <param name="relativePath">The relative path of this code file.</param>
            <param name="mapPath">The function to use to map relative paths to absolute.</param>
            <returns>A code file appropriate for the specified <paramref name="absolutePath"/>.
            If the extension of the specified <paramref name="absolutePath"/> is <c>css</c>, the resulting value will be a 
            new <see cref="T:Kelp.ResourceHandling.CssFile"/>. In all other cases the resulting value is a <see cref="T:Kelp.ResourceHandling.ScriptFile"/>.</returns>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.Create(System.String,System.String,Kelp.ResourceHandling.CodeFile)">
            <summary>
            Creates a code file for the specified <paramref name="absolutePath"/>.
            </summary>
            <param name="absolutePath">The physical path of this code file.</param>
            <param name="relativePath">The relative path of this code file.</param>
            <param name="parent">The parent <see cref="T:Kelp.ResourceHandling.CodeFile"/> that is including this <see cref="T:Kelp.ResourceHandling.CodeFile"/></param>
            <returns>A code file appropriate for the specified <paramref name="absolutePath"/>.
            If the extension of the specified <paramref name="absolutePath"/> is <c>css</c>, the resulting value will be a 
            new <see cref="T:Kelp.ResourceHandling.CssFile"/>. In all other cases the resulting value is a <see cref="T:Kelp.ResourceHandling.ScriptFile"/>.</returns>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.GetETag(System.String,System.DateTime)">
            <summary>
            Gets an E-tag for the specified <paramref name="fileName"/> and <paramref name="lastModified"/> date.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="lastModified">The last modified date of the file.</param>
            <returns>The E-Tag that matches the specified <paramref name="fileName"/> and <paramref name="lastModified"/> date.</returns>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.Minify(System.String)">
            <summary>
            Minifies the specified <paramref name="sourceCode"/>.
            </summary>
            <param name="sourceCode">The source code string to minify.</param>
            <returns>
            The minified version of this file's content.
            </returns>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.ExpandPath(System.String)">
            <summary>
            Returns the expanded version of the specified path.
            </summary>
            <param name="path">The path to expand.</param>
            <returns>The expanded version of the specified path</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.IsPathInIncludeChain(System.String)">
            <summary>
            Determines whether the specified path exists in the list of files already included.
            </summary>
            <param name="path">The path to check.</param>
            <returns>
            <c>true</c> if the specified path exists in the list of files already included; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the specified <c>path</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.Initialize">
            <summary>
            Initialized this <see cref="T:Kelp.ResourceHandling.CodeFile"/>.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.Load">
            <summary>
            Loads the file, either from cache or from its <see cref="P:Kelp.ResourceHandling.CodeFile.AbsolutePath"/>.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.CodeFile.Parse(System.String,System.Boolean)">
            <summary>
            Scans through the specified source code and processes it line by line.
            </summary>
            <param name="sourceCode">The source code to parse.</param>
            <param name="minify">If set to <c>true</c>, and the current settings indicate that the source code will be minified.</param>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.AbsolutePath">
            <summary>
            Gets the absolute path of this code file.
            </summary>
            <exception cref="T:System.ArgumentNullException">If the supplied value is <c>null</c> or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the specified value could not be resolved to an existing file.</exception>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.IsFromCache">
            <summary>
            Gets a value indicating whether this instance has been loaded and initialized entirely from cache.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.RelativePath">
            <summary>
            Gets the relative path of this code file.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.CacheDirectory">
            <summary>
            Gets the temporary directory in which to store the processed version of this file.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.MapPath">
            <summary>
            Gets or sets the delegate method that handles resolving (mapping) or relative paths.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.Includes">
            <summary>
            Gets the recursive list of files this file includes either directly or through it's includes.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.Dependencies">
            <summary>
            Gets the list of files that this <see cref="T:Kelp.ResourceHandling.CodeFile"/> is depending on
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.LastModified">
            <summary>
            Gets the last modified Date and Time of this <see cref="T:Kelp.ResourceHandling.CodeFile"/>
            </summary>
            <remarks>
            This is done by getting the latest last modified datetime from all depend files.
            </remarks> 
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.Content">
            <summary>
            Gets the fully processed content of this file.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.RawContent">
            <summary>
            Gets the raw, unprocessed content of this file.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.References">
            <summary>
            Gets the previously persisted list of <see cref="P:Kelp.ResourceHandling.CodeFile.Includes"/>.
            </summary>
            <remarks>
            This list is used to determine if a previously processed file needs to be refreshed due to changes in
            its constituent files.
            </remarks>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.ETag">
            <summary>
            Gets an E-tag for the file represented with this instance.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.DebugModeOn">
            <summary>
            Gets or sets a value indicating whether to output additional debug information to the output stream.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.CacheName">
            <summary>
            Gets the full name of the temporary file where the processed version of this file will be saved.
            </summary>
            <remarks>
            This is an absolute path.
            </remarks>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.ContentType">
            <summary>
            Gets or sets the content-type of this code file.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.NeedsRefresh">
            <summary>
            Gets a value indicating whether the cached <see cref="T:Kelp.ResourceHandling.CodeFile"/> needs to be refreshed.
            </summary>
            <value><c>true</c> if the cached file is out of date; otherwise, <c>false</c>.</value>
            <remarks>
            The cached file is considered out-of-date when any of the included files has a last-modified datetime greater than the cached file.
            </remarks>
        </member>
        <member name="P:Kelp.ResourceHandling.CodeFile.MinificationEnabled">
            <summary>
            Gets a value indicating whether minification is enabled for this code file.
            </summary>
        </member>
        <member name="T:Kelp.ResourceHandling.Configuration">
            <summary>
            Contains the per-file-extension configuration settings for Kelp.
            </summary>
        </member>
        <member name="P:Kelp.ResourceHandling.Configuration.Current">
            <summary>
            Gets the current <see cref="T:Kelp.ResourceHandling.Configuration"/> instance.
            </summary>
        </member>
        <member name="T:Kelp.ResourceHandling.ResourceType">
            <summary>
            Defines code resource types.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.ResourceType.Script">
            <summary>
            Specifies a <c>JavaScript</c> resource.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.ResourceType.Css">
            <summary>
            Specifies a <c>CSS</c> resource.
            </summary>
        </member>
        <member name="T:Kelp.ResourceHandling.Chars">
            <summary>
            Defines the special characters significant for code processing.
            </summary>
        </member>
        <member name="T:Kelp.ResourceHandling.CssFile">
            <summary>
            Implements a CSS file merger/processor.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.CssFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.CssFile"/> class, using the specified absolute and relative paths.
            </summary>
            <param name="absolutePath">The path of the file to load.</param>
            <param name="relativePath">The relative path of the file to load.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.CssFile.#ctor(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.CssFile"/> class, using the specified absolute and relative paths, 
            and the <paramref name="mappingFunction"/>.
            </summary>
            <param name="absolutePath">The absolute path of the file to load.</param>
            <param name="relativePath">The relative path of the file to load.</param>
            <param name="mappingFunction">The function to use to map relative and virtual paths to absolute.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.CssFile.Minify(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kelp.ResourceHandling.CssFile.Minify(System.String,Microsoft.Ajax.Utilities.CssSettings)">
            <summary>
            Minifies the specified <paramref name="sourceCode"/>, according to the specified minification <paramref name="settings"/>.
            </summary>
            <param name="sourceCode">The source code string to minify.</param>
            <param name="settings">The object that specifis the minification settings for this file.</param>
            <returns>
            The minified version of this file's content.
            </returns>
        </member>
        <member name="M:Kelp.ResourceHandling.CssFile.Load">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.ResourceHandling.CssFile.MinificationEnabled">
            <inheritdoc/>
        </member>
        <member name="T:Kelp.ResourceHandling.PngFile">
            <summary>
            Represents a PNG <see cref="T:Kelp.ResourceHandling.ImageFile"/>
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.PngFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.PngFile"/> class.
            </summary>
            <param name="absolutePath">The absolute path of the image.</param>
        </member>
        <member name="P:Kelp.ResourceHandling.PngFile.CodecInfo">
            <inheritdoc/>
        </member>
        <member name="P:Kelp.ResourceHandling.PngFile.CodecParameters">
            <inheritdoc/>
        </member>
        <member name="T:Kelp.ResourceHandling.ResourceHandler">
            <summary>
            Implements an <see cref="T:System.Web.IHttpHandler"/> for handling image, script and css requests.
            </summary>
        </member>
        <member name="F:Kelp.ResourceHandling.ResourceHandler.SkipProcessingKey">
            <summary>
            The name of the query string property that instructs <see cref="T:Kelp.ResourceHandling.ResourceHandler"/> to return 
            only the raw content, without processing the includes.
            </summary>
            <example>?noprocess=1</example>
        </member>
        <member name="F:Kelp.ResourceHandling.ResourceHandler.SkipProcessingValue">
            <summary>
            The vallue of the query string property (defined with <see cref="F:Kelp.ResourceHandling.ResourceHandler.SkipProcessingKey"/>) 
            that instructs <see cref="T:Kelp.ResourceHandling.ResourceHandler"/> to return only the raw content, without 
            processing the includes.
            </summary>
            <example>?noprocess=1</example>
        </member>
        <member name="F:Kelp.ResourceHandling.ResourceHandler.MaxDifferenceCachedDate">
            <summary>
            Specifies the maximum time difference (in seconds) between the current and the cached files that
            will still be allowed for the files to still be considered equal.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.ResourceHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, 
            Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.ResourceHandler.ProcessRequest(System.Web.HttpContextBase,System.Func{System.String,System.String})">
            <summary>
            Enables processing of HTTP Web requests by a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example,
            Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="mapPath">The function to use to map virtual paths to absolute.</param>
            <exception cref="T:System.ArgumentNullException"><c>context</c> or <c>mapPath</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Kelp.ResourceHandling.ResourceHandler.ProcessCodeFileRequest(System.Web.HttpContextBase,System.Func{System.String,System.String})">
            <summary>
            Processes requests for file types handled by <see cref="T:Kelp.ResourceHandling.CodeFile"/>.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example,
            Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="mapPath">The function to use to map virtual paths to absolute.</param>
            <exception cref="T:System.ArgumentNullException"><c>context</c> or <c>mapPath</c> is <c>null</c>.</exception>
            <remarks>
            The logic of getting and serving a resource file, in a nutshell is similar to:
            <list>
            <item>1) Get the resource item</item>
            <item>2) Is this a previously cached request? (YES: goto 3; NO: goto 5)</item>
            <item>3) Is the resource newer than the cached date? (YES: goto 5; NO: goto 4)</item>
            <item>4) Send 304 headers back to the client</item>
            <item>5) Send content down the wire</item>
            </list>
            </remarks>
        </member>
        <member name="M:Kelp.ResourceHandling.ResourceHandler.ProcessImageFileRequest(System.Web.HttpContextBase,System.Func{System.String,System.String})">
            <summary>
            Processes requests for file types handled by <see cref="T:Kelp.ResourceHandling.ImageFile"/>.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example,
            Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="mapPath">The function to use to map virtual paths to absolute.</param>
            <exception cref="T:System.ArgumentNullException"><c>context</c> or <c>mapPath</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Kelp.ResourceHandling.ResourceHandler.SendContent(System.Web.HttpContextBase,Kelp.ResourceHandling.CodeFile)">
            <summary>
            Sends the contents of the file down the response.
            </summary>
            <param name="context">The context under which this code is executing.</param>
            <param name="file">The file to send.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.ResourceHandler.SendContent(System.Web.HttpContextBase,Kelp.ResourceHandling.ImageFile)">
            <summary>
            Sends the contents of the file down the response.
            </summary>
            <param name="context">The context under which this code is executing.</param>
            <param name="file">The file to send.</param>
        </member>
        <member name="P:Kelp.ResourceHandling.ResourceHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns><c>true</c> if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kelp.ResourceHandling.ScriptFile">
            <summary>
            Implements a JS file merger/processor, optionally minifying and obfuscating them.
            </summary>
        </member>
        <member name="M:Kelp.ResourceHandling.ScriptFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.ScriptFile"/> class, using the specified absolute and relative paths.
            </summary>
            <param name="absolutePath">The path of the file to load.</param>
            <param name="relativePath">The relative path of the file to load.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.ScriptFile.#ctor(System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.ResourceHandling.ScriptFile"/> class, using the specified absolute and relative paths, and the path mapper function.
            </summary>
            <param name="absolutePath">The path of the file to load.</param>
            <param name="relativePath">The relative path of the file to load.</param>
            <param name="mappingFunction">The function to use to map relative and virtual paths to absolute.</param>
        </member>
        <member name="M:Kelp.ResourceHandling.ScriptFile.Minify(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kelp.ResourceHandling.ScriptFile.Minify(System.String,Microsoft.Ajax.Utilities.CodeSettings)">
            <summary>
            Minifies the specified <paramref name="sourceCode"/>, according to the specified minification <paramref name="settings"/>.
            </summary>
            <param name="sourceCode">The source code string to minify.</param>
            <param name="settings">The object that specifis the minification settings for this file.</param>
            <returns>
            The minified version of this file's content.
            </returns>
        </member>
        <member name="P:Kelp.ResourceHandling.ScriptFile.MinificationEnabled">
            <inheritdoc/>
        </member>
        <member name="T:Kelp.SyntaxHighlighting.ExpressionGroup">
            <summary>
            Represents a group of language expressions.
            </summary>
            <remarks>
            A group of language expressions is a group keywords that should be treated equally - all specified keywords will
            get the same class name.
            </remarks>
        </member>
        <member name="M:Kelp.SyntaxHighlighting.ExpressionGroup.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.SyntaxHighlighting.ExpressionGroup"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="keywords">The pipe-separated list of language keywords (e.g: 'if|else|function...').</param>
            <param name="treatAsWord">if set to <c>true</c> [treat as word].</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
        </member>
        <member name="P:Kelp.SyntaxHighlighting.ExpressionGroup.ClassName">
            <summary>
            Gets the CSS class name associated with this group.
            </summary>
            <value>The CSS class name associated with this group.</value>
        </member>
        <member name="P:Kelp.SyntaxHighlighting.ExpressionGroup.Expression">
            <summary>
            Gets the regular expression for this group of words.
            </summary>
            <value>The regular expression for this group of words.</value>
        </member>
        <member name="T:Kelp.SyntaxHighlighting.LanguageDefinition">
            <summary>
            Defines the language elements for syntax highlighting.
            </summary>
        </member>
        <member name="F:Kelp.SyntaxHighlighting.LanguageDefinition.ClassNameComment">
            <summary>
            The CSS class name that will be used on comments.
            </summary>
        </member>
        <member name="F:Kelp.SyntaxHighlighting.LanguageDefinition.ClassNameString">
            <summary>
            The CSS class name that will be used on strings.
            </summary>
        </member>
        <member name="M:Kelp.SyntaxHighlighting.LanguageDefinition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.SyntaxHighlighting.LanguageDefinition"/> class, using the specified
            <paramref name="name"/>.
            </summary>
            <param name="name">The name of the language this definition represents (e.g. 'javascript').</param>
            <param name="caseSensitive">If set to <c>true</c>, indicates that this language is case sensitive.</param>
        </member>
        <member name="P:Kelp.SyntaxHighlighting.LanguageDefinition.Name">
            <summary>
            Gets the ID of the language. 
            </summary>
            <remarks>
            This value will be includes in the class name of the syntax highlighted block.
            </remarks>
        </member>
        <member name="P:Kelp.SyntaxHighlighting.LanguageDefinition.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether this language is case sensitive.
            </summary>
            <value><c>true</c> if this language is case sensitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Kelp.SyntaxHighlighting.LanguageDefinition.Quotes">
            <summary>
            Gets or sets the language's quote expressions.
            </summary>
            <value>The quote expressions for this language.</value>
        </member>
        <member name="P:Kelp.SyntaxHighlighting.LanguageDefinition.Comments">
            <summary>
            Gets or sets the language's comment expressions.
            </summary>
            <value>The comment expressions for this language.</value>
        </member>
        <member name="P:Kelp.SyntaxHighlighting.LanguageDefinition.Expressions">
            <summary>
            Gets or sets the language expression groups.
            </summary>
            <value>The groups of expressions to use with this language.</value>
        </member>
        <member name="T:Kelp.SyntaxHighlighting.SyntaxHighlighter">
            <summary>
            Formats source code strings with syntax highlighting HTML markup as defined with <see cref="T:Kelp.SyntaxHighlighting.LanguageDefinition"/>.
            </summary>
        </member>
        <member name="M:Kelp.SyntaxHighlighting.SyntaxHighlighter.#ctor(Kelp.SyntaxHighlighting.LanguageDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.SyntaxHighlighting.SyntaxHighlighter"/> class.
            </summary>
            <param name="language">The definition of the language being highlighted.</param>
        </member>
        <member name="M:Kelp.SyntaxHighlighting.SyntaxHighlighter.#ctor(Kelp.SyntaxHighlighting.LanguageDefinition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kelp.SyntaxHighlighting.SyntaxHighlighter"/> class.
            </summary>
            <param name="language">The definition of the language being processed.</param>
            <param name="tabString">The string to use for replacing TAB characters.</param>
            <param name="spaceString">The string to use for replacing SPACE characters.</param>
        </member>
        <member name="M:Kelp.SyntaxHighlighting.SyntaxHighlighter.Format(System.String)">
            <summary>
            Formats the specified source code string.
            </summary>
            <remarks>The resulting value will be the HTML string that represents the syntax highlighted source code.</remarks>
            <param name="sourceCode">The source code to process.</param>
            <returns>The syntax highlighted version of the specified source code</returns>
        </member>
    </members>
</doc>
