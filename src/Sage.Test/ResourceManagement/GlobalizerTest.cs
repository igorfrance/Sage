// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>

/**
 * Open Source Initiative OSI - The MIT License (MIT):Licensing
 * [OSI Approved License]
 * The MIT License (MIT)
 *
 * Copyright (c) 2011 Igor France
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local
namespace Sage.Test.ResourceManagement
{
	using System.IO;

	using Kelp.Extensions;

	using Machine.Specifications;
	using Sage.Configuration;
	using Sage.ResourceManagement;

	[Subject(typeof(Globalizer)), Tags(Categories.ResourceManagement)]
	public class When_globalizing_a_resource
	{
		private static readonly SageContext context = Mother.CreateSageContext("default", "com");
		private static XmlResource resource;
		
		private Because of = () =>
			{
				string itemPath = context.Path.Expand("configuration/tests/internationalization-test1.xml");
				resource = new XmlResource(itemPath, context);

				Globalizer globalizer = new Globalizer(context);
				globalizer.Globalize(resource);
			};

		private It Should_translate_to_all_locales_applicable_for_its_category = () =>
			{
				CategoryInfo categoryInfo = context.ProjectConfiguration.Categories[context.Category];
				foreach (string locale in categoryInfo.Locales)
				{
					string localizedPath = resource.GetGlobalizedName(locale, true);
					File.Exists(localizedPath).ShouldBeTrue();
				}
			};

		private It Should_generate_jp_conditional_node_in_jp = () =>
			resource.LoadGlobalizedDocument("jp").SelectSingleElement("/testcase/node2")
				.ShouldNotBeNull();

		private It Should_generate_de_conditional_node_in_de = () =>
			resource.LoadGlobalizedDocument("de").SelectSingleElement("/testcase/node3")
				.ShouldNotBeNull();

		private It Should_generate_de_conditional_node_in_at = () =>
			resource.LoadGlobalizedDocument("at").SelectSingleElement("/testcase/node3")
				.ShouldNotBeNull();

		private It Should_not_generate_jp_conditional_node_in_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/node2")
				.ShouldBeNull();

		private It Should_not_generate_de_conditional_node_in_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/node3")
				.ShouldBeNull();

		private It Should_generate_englishfrench_conditional_node_in_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/englishAndFrenchNode")
				.ShouldNotBeNull();

		private It Should_generate_englishfrench_conditional_node_in_fr = () =>
			resource.LoadGlobalizedDocument("fr").SelectSingleElement("/testcase/englishAndFrenchNode")
				.ShouldNotBeNull();

		private It Should_not_generate_englishfrench_conditional_node_in_de = () =>
			resource.LoadGlobalizedDocument("de").SelectSingleElement("/testcase/englishAndFrenchNode")
				.ShouldBeNull();

		private It Should_generate_nonenglish_conditional_node_in_fr = () =>
			resource.LoadGlobalizedDocument("fr").SelectSingleElement("/testcase/nonEnglishNode")
				.ShouldNotBeNull();

		private It Should_generate_nonenglish_conditional_node_in_hk = () =>
			resource.LoadGlobalizedDocument("hk").SelectSingleElement("/testcase/nonEnglishNode")
				.ShouldNotBeNull();

		private It Should_not_generate_nonenglish_conditional_node_in_us = () =>
			resource.LoadGlobalizedDocument("us").SelectSingleElement("/testcase/nonEnglishNode")
				.ShouldBeNull();

		private It Should_not_generate_nonenglish_conditional_node_in_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/nonEnglishNode")
				.ShouldBeNull();

		private It Should_properly_translate_nested_phrases = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/node1")
				.InnerText.ShouldContain("appears");

		private It Should_correctly_resolve_local_label_variable_for_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/node4/button")
				.GetAttribute("label").ShouldEqual("Example");

		private It Should_correctly_resolve_local_width_variable_for_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/node4/button/width")
				.InnerText.Trim().ShouldEqual("400");

		private It Should_correctly_resolve_local_height_variable_for_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/node4/button/height")
				.InnerText.Trim().ShouldEqual("300");

		private It Should_correctly_resolve_local_label_variable_for_jp = () =>
			resource.LoadGlobalizedDocument("jp").SelectSingleElement("/testcase/node4/button")
				.GetAttribute("label").ShouldEqual("例");

		private It Should_correctly_resolve_local_width_variable_for_jp = () =>
			resource.LoadGlobalizedDocument("jp").SelectSingleElement("/testcase/node4/button/width")
				.InnerText.Trim().ShouldEqual("300");

		private It Should_correctly_resolve_local_height_variable_for_jp = () =>
			resource.LoadGlobalizedDocument("jp").SelectSingleElement("/testcase/node4/button/height")
				.InnerText.Trim().ShouldEqual("200");

		private It Should_correctly_resolve_global_variable_for_com = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("/testcase/node5")
				.InnerText.Trim().ShouldEqual("FteCeO63vrn_Ch1DGYMh0_LC_o3_VNs1");

		private It Should_correctly_resolve_global_variable_for_jp = () =>
			resource.LoadGlobalizedDocument("jp").SelectSingleElement("/testcase/node5")
				.InnerText.Trim().ShouldEqual("8j2911cxratOivpVoyKDn_yTEWV1Pnsh");

		private It Should_correctly_resolve_global_variable_for_la = () =>
			resource.LoadGlobalizedDocument("la").SelectSingleElement("/testcase/node5")
				.InnerText.Trim().ShouldEqual("G__FEnLXWRt9QQc4QOIf_OL5f04BCPi9");

		private It Should_correctly_resolve_global_variable_for_br = () =>
			resource.LoadGlobalizedDocument("br").SelectSingleElement("/testcase/node5")
				.InnerText.Trim().ShouldEqual("DwlUM6vlt08WBHjIkpNEGVkL9wBuFQ_6");

		private It Should_correctly_resolve_japanese_intl_localization_block = () =>
			resource.LoadGlobalizedDocument("jp").SelectSingleElement("//testNode")
				.InnerText.ShouldEqual("666");

		private It Should_correctly_resolve_chinese_intl_localization_block = () =>
			resource.LoadGlobalizedDocument("cn").SelectSingleElement("//testNode")
				.InnerText.ShouldEqual("666");

		private It Should_correctly_resolve_taiwanese_intl_localization_block = () =>
			resource.LoadGlobalizedDocument("tw").SelectSingleElement("//testNode")
				.InnerText.ShouldEqual("666");

		private It Should_correctly_resolve_german_intl_localization_block = () =>
			resource.LoadGlobalizedDocument("de").SelectSingleElement("//testNode")
				.InnerText.ShouldEqual("777");

		private It Should_correctly_resolve_french_intl_localization_block = () =>
			resource.LoadGlobalizedDocument("fr").SelectSingleElement("//testNode")
				.InnerText.ShouldEqual("456");

		private It Should_correctly_resolve_default_intl_localization_block = () =>
			resource.LoadGlobalizedDocument("com").SelectSingleElement("//testNode")
				.InnerText.ShouldEqual("123456");
	}
}
