//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local
namespace Sage.Test.ResourceManagement
{
	using System;
	using System.Xml;

	using Machine.Specifications;
	using Sage.Configuration;

	[Subject(typeof(LocaleInfo)), Tags(Categories.ResourceManagement)]
	public class When_requesting_info_on_english_locale
	{
		private static LocaleInfo localeInfo;
		private static XmlDocument xmlDocument = new XmlDocument();

		private Establish ctx = () =>
			{
				xmlDocument.LoadXml(@"
					<globalization>
						<locale name=""uk"" dictionaryNames=""en-UK,en"" resourceNames=""en-UK,en,default"">
							<format culture=""en-uk"" shortDate=""d"" longDate=""D""/>
						</locale>
					</globalization>");

				localeInfo = new LocaleInfo((XmlElement) xmlDocument.SelectSingleNode("/globalization/locale"));
			};

		private It Should_have_the_correct_name = () => 
			localeInfo.Name.ShouldEqual("uk");

		private It Should_have_the_correct_resource_name = () => 
			localeInfo.ResourceNames[0].ShouldEqual("en-UK");

		private It Should_have_the_same_resource_name_as_the_dictionary_name = () => 
			localeInfo.ResourceNames[0].ShouldEqual(localeInfo.DictionaryNames[0]);

		private It Should_have_the_deffault_fallback_resource_name = () => 
			localeInfo.ResourceNames[2].ShouldEqual("default");
	}

	[Subject(typeof(LocaleInfo)), Tags(Categories.ResourceManagement)]
	public class When_requesting_an_empty_locale
	{
		private static LocaleInfo localeInfo;
		private static Exception exception;

		private Because of = () => exception = Catch.Exception(() => localeInfo = new LocaleInfo(null));

		private It Should_Fail = () => exception.ShouldBeOfType<ArgumentNullException>();
	}
}