//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace Sage.Test.Configuration
{
	using System;

	using Machine.Specifications;
	using Sage.Configuration;

	[Subject(typeof(IpAddress)), Tags(Categories.Configuration)]
	public class When_working_with_single_IP_address_instances
	{
		It Should_correctly_match_the_specified_value1 = () =>
			new IpAddress("127.0.0.1").Matches("127.0.0.1").ShouldBeTrue();

		It Should_correctly_match_the_specified_value2 = () =>
			new IpAddress("127.0.0.1").Matches("::1").ShouldBeTrue();

		It Should_correctly_match_the_specified_value3 = () =>
			new IpAddress("::1").Matches("127.0.0.1").ShouldBeTrue();

		It Should_not_match_the_incorrect_value1 = () =>
			new IpAddress("127.0.0.1").Matches("12.2.45.127").ShouldBeFalse();

		It Should_not_match_the_incorrect_value2 = () =>
			new IpAddress("227.45.2.16").Matches("127.0.0.1").ShouldBeFalse();

		It Should_not_match_the_incorrect_value3 = () =>
			new IpAddress("::1").Matches("227.45.2.16").ShouldBeFalse();
	}

	[Subject(typeof(IpAddress)), Tags(Categories.Configuration)]
	public class When_working_with_IP_address_range_instances
	{
		It Should_correctly_match_the_specified_value1 = () =>
			new IpAddress("10.0.0.1", "10.1.1.1").Matches("10.0.255.255").ShouldBeTrue();

		It Should_correctly_match_the_specified_value2 = () =>
			new IpAddress("194.109.0.1", "194.109.255.254").Matches("194.109.227.126").ShouldBeTrue();

		It Should_not_match_the_incorrect_value1 = () =>
			new IpAddress("10.0.0.1", "10.1.1.1").Matches("10.2.255.255").ShouldBeFalse();

		It Should_not_match_the_incorrect_value2 = () =>
			new IpAddress("194.109.0.1", "194.108.255.254").Matches("194.109.227.126").ShouldBeFalse();
	}
}
