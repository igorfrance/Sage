//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------
namespace Kelp.Test.Core
{
	using System.Collections.Specialized;
	using System.Xml;

	using Machine.Specifications;

	using Kelp.Core;

	[Subject(typeof(QueryString)), Tags(Categories.Core)]
	public class When_converting_a_querystring_to_xml
	{
		private static XmlDocument testDoc;
		private static QueryString coll;
		private static XmlElement collElement;

		private Establish ctx = () =>
		{
			testDoc = new XmlDocument();
			coll = new QueryString("first=Humphrey&last=Bogart&occupation=Actor");
		};

		private Because of = () => collElement = coll.ToXml(testDoc);

		private It Should_not_be_null = () => collElement.ShouldNotBeNull();
		private It Should_have_3_attributes = () => collElement.Attributes.Count.ShouldEqual(3);
		private It Should_have_a_first_attribute = () => collElement.HasAttribute("first").ShouldBeTrue();
		private It Should_have_a_last_attribute = () => collElement.HasAttribute("last").ShouldBeTrue();
		private It Should_also_be_true = () => coll.ToXml(testDoc, "testElementName").Name.ShouldEqual("testElementName");
	}

	[Subject(typeof(QueryString)), Tags(Categories.Core)]
	public class When_converting_a_querystring_to_string
	{
		private It Should_serialize_this_correctly = () => 
			(new QueryString { { "a", "1" }, { "b", "2" }, { "c", "3" } }).ToString(false).ShouldEqual("a=1&b=2&c=3");

		private It Should_also_serialize_this_correctly = () => 
			(new QueryString { { "a", "1" }, { "b", "2" }, { "c", "3" }, { "c", "4" } }).ToString(false).ShouldEqual("a=1&b=2&c=3,4");
	}

	[Subject(typeof(QueryString)), Tags(Categories.Core)]
	public class When_parsing_a_querystring
	{
		private static QueryString coll = new QueryString();

		private It Should_serialize_correctly_again =
			() => coll.Parse("color=red&name=Igor").ToString(false).ShouldEqual("color=red&name=Igor");

		private It Should_return_the_correct_properties =
			() => coll.Parse("color=blue")["color"].ShouldEqual("blue");

		private It Should_return_null_for_non_parsed_entries =
			() => coll.Parse("color=blue")["name"].ShouldBeNull();

		private It Should_have_zero_entries_for_semi_empty_strings =
			() => coll.Parse("=&=").Count.ShouldEqual(0);

		private It Should_serialize_to_an_empty_String_for_semi_empty_strings =
			() => coll.Parse("=&=").ToString().ShouldEqual(string.Empty);
	}

	[Subject(typeof(QueryString)), Tags(Categories.Core)]
	public class When_removing_an_entry_from_the_querystring
	{
		private static QueryString q = new QueryString("a=b");

		private Because of = () => q.Remove("a");

		private It Should_be_empty = () => q.ToString().ShouldBeEmpty();
		private It Should_be_empty_when_passing_true_to_the_to_string_method = () => q.ToString(true).ShouldBeEmpty();
	}

	[Subject(typeof(QueryString)), Tags(Categories.Core)]
	public class When_creating_a_new_querystring_with_empty_entries
	{
		private static NameValueCollection c = new NameValueCollection();
		private static QueryString q;
		
		private Establish ctx = () =>
		{
			c.Add(null, null);
			c.Add("a", "1");
			c.Add("b", "2");
		};

		private Because of = () => q = new QueryString(c);

		private It Should_contain_only_two_entries = () => q.Count.ShouldEqual(2);
	}
}