// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>
/**
 * Open Source Initiative OSI - The MIT License (MIT):Licensing
 * [OSI Approved License]
 * The MIT License (MIT)
 *
 * Copyright (c) 2011 Igor France
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
namespace Kelp.Test.ResourceHandling
{
	using System;
	using System.IO;

	using Kelp.ResourceHandling;
	using Machine.Specifications;

	[Subject(typeof(CssFile)), Tags(Categories.ResourceHandling)]
	public class When_requesting_a_non_minified_css_file
	{
		private static readonly string scriptPath = Utilities.GetStylePath("stylesheet1.css");
		private static string contents;
		private static CssFile proc;

		private Establish ctx = () =>
		{
			var tempDirectory = Utilities.MapPath(Configuration.Current.TemporaryDirectory);
			if (Directory.Exists(tempDirectory))
				Directory.Delete(tempDirectory, true);

			proc = new CssFile(scriptPath, "stylesheet1.css", Utilities.MapPath);
		};

		private Because of = () => contents = proc.Content;

		private It Should_not_be_empty = () => contents.ShouldNotBeEmpty();
		private It Should_contain_child_stylesheets = () => contents.ShouldContain("#example1");
		private It Should_contain_child_stylesheets2 = () => contents.ShouldContain("url(image1.jpg)");
		private It Should_still_contain_empty_styles = () => contents.ShouldContain("#empty");
	}

	[Subject(typeof(CssFile)), Tags(Categories.ResourceHandling)]
	public class When_requesting_a_minified_css_file
	{
		private static readonly string scriptPath = Utilities.GetStylePath("stylesheet1.css");
		private static string contents;
		private static CssFile proc;

		private Establish ctx = () =>
		{
			var tempDirectory = Utilities.MapPath(Configuration.Current.TemporaryDirectory);
			if (Directory.Exists(tempDirectory))
				Directory.Delete(tempDirectory, true);

			proc = new CssFile(scriptPath, "stylesheet1.css", Utilities.MapPath);
		};

		private Because of = () => contents = proc.Content;

		private It Should_not_be_empty = () => contents.ShouldNotBeEmpty();
		private It Should_contain_child_stylesheets = () => contents.ShouldContain("#example1");
		private It Should_contain_child_stylesheets2 = () => contents.ShouldContain("url(image1.jpg)");
	}
}
