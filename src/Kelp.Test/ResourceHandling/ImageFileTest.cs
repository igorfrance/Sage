// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>
/**
 * Open Source Initiative OSI - The MIT License (MIT):Licensing
 * [OSI Approved License]
 * The MIT License (MIT)
 *
 * Copyright (c) 2011 Igor France
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
namespace Kelp.Test.ResourceHandling
{
	using System;
	using System.Drawing;
	using System.IO;
	using System.Linq;

	using Kelp.Imaging.Filters;
	using Kelp.ResourceHandling;

	using Machine.Specifications;

	[Subject(typeof(ImageFile)), Tags(Categories.ResourceHandling)]
	public class When_opening_a_file_with_many_querystring_parameters
	{
		private static ImageFile subject;
		private static string imagePath = Utilities.GetImagePath("illustration4.jpg");
		private static string queryString = "rs=410,310,0&cp=0,0,400,300&bt=1&ct=1&gm=1&mh=1&mv=1&gs=1&hsl=1,2,3&rgb=4,5,6&se=1&sx=1";

		Because bcs = () =>
		{
			subject = ImageFile.Create(Utilities.GetImagePath("illustration4.jpg"), queryString, Utilities.MapPath);
		};

		It Should_contain_brightness_filter = () => subject.Filter.Filters.Count(f => f is BrightnessMatrix).ShouldEqual(1);

		It Should_contain_contrast_filter = () => subject.Filter.Filters.Count(f => f is ContrastMatrix).ShouldEqual(1);

		It Should_contain_gamma_filter = () => subject.Filter.Filters.Count(f => f is GammaMatrix).ShouldEqual(1);

		It Should_contain_mirrorh_filter = () => subject.Filter.Filters.Count(f => f is MirrorH).ShouldEqual(1);

		It Should_contain_mirrorv_filter = () => subject.Filter.Filters.Count(f => f is MirrorV).ShouldEqual(1);

		It Should_contain_grayscape_filter = () => subject.Filter.Filters.Count(f => f is GrayscaleMatrix).ShouldEqual(1);

		It Should_contain_hsl_filter = () => subject.Filter.Filters.Count(f => f is HSLFilter).ShouldEqual(1);

		It Should_contain_color_filter = () => subject.Filter.Filters.Count(f => f is ColorBalance).ShouldEqual(1);

		It Should_contain_sepia_filter = () => subject.Filter.Filters.Count(f => f is SepiaMatrix).ShouldEqual(1);

		It Should_contain_sharpenx_filter = () => subject.Filter.Filters.Count(f => f is GaussianSharpen).ShouldEqual(1);

		It Should_generate_cached_image = () => File.Exists(subject.CachePath).ShouldBeTrue();

		It Should_resize_image_to_400x300 = () => 
		{
			var bm = new Bitmap(subject.CachePath);
			bm.Width.ShouldEqual(400);
			bm.Height.ShouldEqual(300);
		};
	}
}
