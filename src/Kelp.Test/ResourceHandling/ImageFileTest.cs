//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------
namespace Kelp.Test.ResourceHandling
{
	using System;
	using System.Collections.Generic;
	using System.Drawing;
	using System.IO;
	using System.Linq;
	using System.Text;

	using Kelp.Imaging.Filters;
	using Kelp.ResourceHandling;

	using Machine.Specifications;

	[Subject(typeof(ImageFile)), Tags(Categories.ResourceHandling)]
	public class When_opening_a_file_with_many_querystring_parameters
	{
		private static ImageFile subject;
		private static string imagePath = Utilities.GetImagePath("illustration4.jpg");
		private static string queryString = "rs=410,310,0&cp=0,0,400,300&bt=1&ct=1&gm=1&mh=1&mv=1&gs=1&hsl=1,2,3&rgb=4,5,6&se=1&sx=1";

		Because bcs = () =>
		{
			subject = ImageFile.Create(Utilities.GetImagePath("illustration4.jpg"), queryString, Utilities.MapPath);
			byte[] imageBytes = subject.Bytes;
		};

		It Should_contain_brightness_filter = () => subject.Filter.Filters.Where(f => f is BrightnessMatrix).Count().ShouldEqual(1);

		It Should_contain_contrast_filter = () => subject.Filter.Filters.Where(f => f is ContrastMatrix).Count().ShouldEqual(1);

		It Should_contain_gamma_filter = () => subject.Filter.Filters.Where(f => f is GammaMatrix).Count().ShouldEqual(1);

		It Should_contain_mirrorh_filter = () => subject.Filter.Filters.Where(f => f is MirrorH).Count().ShouldEqual(1);

		It Should_contain_mirrorv_filter = () => subject.Filter.Filters.Where(f => f is MirrorV).Count().ShouldEqual(1);

		It Should_contain_grayscape_filter = () => subject.Filter.Filters.Where(f => f is GrayscaleMatrix).Count().ShouldEqual(1);

		It Should_contain_hsl_filter = () => subject.Filter.Filters.Where(f => f is HSLFilter).Count().ShouldEqual(1);

		It Should_contain_color_filter = () => subject.Filter.Filters.Where(f => f is ColorBalance).Count().ShouldEqual(1);

		It Should_contain_sepia_filter = () => subject.Filter.Filters.Where(f => f is SepiaMatrix).Count().ShouldEqual(1);

		It Should_contain_sharpenx_filter = () => subject.Filter.Filters.Where(f => f is GaussianSharpen).Count().ShouldEqual(1);

		It Should_generate_cached_image = () => File.Exists(subject.CachePath).ShouldBeTrue();

		It Should_resize_image_to_400x300 = () => 
		{
			var bm = new Bitmap(subject.CachePath);
			bm.Width.ShouldEqual(400);
			bm.Height.ShouldEqual(300);
		};
	}
}
