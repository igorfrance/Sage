// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>
/**
 * Open Source Initiative OSI - The MIT License (MIT):Licensing
 * [OSI Approved License]
 * The MIT License (MIT)
 *
 * Copyright (c) 2011 Igor France
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
namespace Kelp.Test.Extensions
{
	using System;

	using Kelp.Extensions;
	using Machine.Specifications;

	[Subject(typeof(DateTimeExtensions)), Tags(Categories.Core)]
	public class When_using_the_datetime_extensions
	{
		private static DateTime x;

		private Establish ctx = () =>
		{
			x = new DateTime(2000, 1, 1);
		};

		private Because of = () => x.Offset("+2d");

		private It Should_correctly_add_two_days = () => x.Offset("+2d").Day.ShouldEqual(3);
		private It Should_correctly_add_two_years = () => x.Offset("+2y").Year.ShouldEqual(2002);
		private It Should_correctly_substract_four_months = () => x.Offset("-4M").Month.ShouldEqual(9);
		private It Should_correctly_substract_four_months_and_change_the_year = () => x.Offset("-4M").Year.ShouldEqual(1999);
		private It Should_correctly_add_1000_years = () => x.Offset("1000y").Year.ShouldEqual(3000);
	}
}