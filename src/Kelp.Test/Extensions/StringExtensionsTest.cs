// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>
/**
 * Copyright 2012 Igor France
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace Kelp.Test.Extensions
{
	using Kelp.Extensions;
	using Machine.Specifications;


	[Subject(typeof(StringExtensions)), Tags(Categories.Core)]
	public class When_using_string_extension_contain_any_of
	{
		private static string subject = "This is a string value that is to be tested";

		private It Should_return_true_using_a_string_array = () => subject.ContainsAnyOf(new[] { "is", "not", "x" }).ShouldBeTrue();
		private It Should_return_true_using_a_string = () => subject.ContainsAnyOf("that").ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters = () => subject.ContainsAnyOf("the", "subject", "only", "needs", "to", "contain", "any", "substring").ShouldBeTrue();
		private It Should_be_case_sensitive = () => subject.ContainsAnyOf("THAT").ShouldBeFalse();

		private It Should_return_true_using_a_string_array_case_insensitive = () => subject.ContainsAnyOf(true, new[] { "IS", "NOT", "X" }).ShouldBeTrue();
		private It Should_return_true_using_a_string_case_insensitive = () => subject.ContainsAnyOf(true, "TO").ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters_case_insensitive = () => subject.ContainsAnyOf(true, "missing", "present", "THAT").ShouldBeTrue();
		private It Should_return_false_when_missing = () => subject.ContainsAnyOf(true, "missing").ShouldBeFalse();
	}

	[Subject(typeof(StringExtensions)), Tags(Categories.Core)]
	public class When_using_string_extension_contain_all_of
	{
		private static string subject = "This is a string value that is to be tested";

		private It Should_return_true_using_a_string_array = () => subject.ContainsAllOf(new[] { "string", "value", "be" }).ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters = () => subject.ContainsAllOf("that", "to", "be").ShouldBeTrue();
		private It Should_return_false_when_missing_only_one = () => subject.ContainsAllOf("missing", "that", "to", "be").ShouldBeFalse();

		private It Should_return_true_using_a_string_array_case_insensitive = () => subject.ContainsAllOf(true, new[] { "STRING", "VALUE", "BE" }).ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters_case_insensitive = () => subject.ContainsAllOf(true, "THAT", "TO", "BE").ShouldBeTrue();
		private It Should_return_false_when_missing_only_one_case_insensitive = () => subject.ContainsAllOf(true, "MISSING", "THAT", "TO", "BE").ShouldBeFalse();
	}

	[Subject(typeof(StringExtensions)), Tags(Categories.Core)]
	public class When_using_string_extension_equal_any_of
	{
		private It Should_return_true_when_one_is_equal = () => "This".EqualsAnyOf("value", "bla", "This").ShouldBeTrue();
		private It Should_be_case_sensitive = () => "value".EqualsAnyOf("MISSING", "VALUE").ShouldBeFalse();

		private It Should_return_true_when_one_is_equal_case_insensitive = () => "This".EqualsAnyOf(true, "value", "bla", "THIS").ShouldBeTrue();
		private It Should_return_true_when_one_is_equal_case_insensitive2 = () => "value".EqualsAnyOf(true, "MISSING", "VALUE").ShouldBeTrue();
		private It Should_return_false_when_none_is_equal_case_insensitive = () => "value".EqualsAnyOf(true, "MISSING").ShouldBeFalse();
	}
}