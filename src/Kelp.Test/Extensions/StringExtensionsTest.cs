// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>
/**
 * Open Source Initiative OSI - The MIT License (MIT):Licensing
 * [OSI Approved License]
 * The MIT License (MIT)
 *
 * Copyright (c) 2011 Igor France
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
namespace Kelp.Test.Extensions
{
	using Kelp.Core.Extensions;
	using Machine.Specifications;


	[Subject(typeof(StringExtensions)), Tags(Categories.Core)]
	public class When_using_string_extension_contain_any_of
	{
		private static string subject = "This is a string value that is to be tested";

		private It Should_return_true_using_a_string_array = () => subject.ContainsAnyOf(new[] { "is", "not", "x" }).ShouldBeTrue();
		private It Should_return_true_using_a_string = () => subject.ContainsAnyOf("that").ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters = () => subject.ContainsAnyOf("the", "subject", "only", "needs", "to", "contain", "any", "substring").ShouldBeTrue();
		private It Should_be_case_sensitive = () => subject.ContainsAnyOf("THAT").ShouldBeFalse();

		private It Should_return_true_using_a_string_array_case_insensitive = () => subject.ContainsAnyOf(true, new[] { "IS", "NOT", "X" }).ShouldBeTrue();
		private It Should_return_true_using_a_string_case_insensitive = () => subject.ContainsAnyOf(true, "TO").ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters_case_insensitive = () => subject.ContainsAnyOf(true, "missing", "present", "THAT").ShouldBeTrue();
		private It Should_return_false_when_missing = () => subject.ContainsAnyOf(true, "missing").ShouldBeFalse();
	}

	[Subject(typeof(StringExtensions)), Tags(Categories.Core)]
	public class When_using_string_extension_contain_all_of
	{
		private static string subject = "This is a string value that is to be tested";

		private It Should_return_true_using_a_string_array = () => subject.ContainsAllOf(new[] { "string", "value", "be" }).ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters = () => subject.ContainsAllOf("that", "to", "be").ShouldBeTrue();
		private It Should_return_false_when_missing_only_one = () => subject.ContainsAllOf("missing", "that", "to", "be").ShouldBeFalse();

		private It Should_return_true_using_a_string_array_case_insensitive = () => subject.ContainsAllOf(true, new[] { "STRING", "VALUE", "BE" }).ShouldBeTrue();
		private It Should_return_true_using_multple_string_parameters_case_insensitive = () => subject.ContainsAllOf(true, "THAT", "TO", "BE").ShouldBeTrue();
		private It Should_return_false_when_missing_only_one_case_insensitive = () => subject.ContainsAllOf(true, "MISSING", "THAT", "TO", "BE").ShouldBeFalse();
	}

	[Subject(typeof(StringExtensions)), Tags(Categories.Core)]
	public class When_using_string_extension_equal_any_of
	{
		private It Should_return_true_when_one_is_equal = () => "This".EqualsAnyOf("value", "bla", "This").ShouldBeTrue();
		private It Should_be_case_sensitive = () => "value".EqualsAnyOf("MISSING", "VALUE").ShouldBeFalse();

		private It Should_return_true_when_one_is_equal_case_insensitive = () => "This".EqualsAnyOf(true, "value", "bla", "THIS").ShouldBeTrue();
		private It Should_return_true_when_one_is_equal_case_insensitive2 = () => "value".EqualsAnyOf(true, "MISSING", "VALUE").ShouldBeTrue();
		private It Should_return_false_when_none_is_equal_case_insensitive = () => "value".EqualsAnyOf(true, "MISSING").ShouldBeFalse();
	}
}