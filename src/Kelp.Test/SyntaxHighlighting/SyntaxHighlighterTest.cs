//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------
namespace Kelp.Test.SyntaxHighlighting
{
	using System;
	using System.Diagnostics.CodeAnalysis;

	using Machine.Specifications;
	using Kelp.SyntaxHighlighting;

	[Subject(typeof(SyntaxHighlighter)), Tags(Categories.SyntaxHighlighting)]
	public class After_highlighting_a_JavaScript_file_with_a_comment
	{
		private static readonly SyntaxHighlighter sh = new SyntaxHighlighter(new JavaScriptDefinition());
		private static string contents;

		private Establish context = () => 
			contents = sh.Format("var x = new Object();\r\n// comment line\r\nvar y = \"First name\";");

		private It Should_contain_a_comment_indicator = () => contents.ShouldContain("comment");
		private It Should_contain_a_keyword_indicator = () => contents.ShouldContain("keyword");
		private It Should_contain_a_builtin_indicator = () => contents.ShouldContain("builtin");
		private It Should_contain_a_nonbreakingspace_indicator = () => contents.ShouldContain("&#160;");
	}

	[Subject(typeof(SyntaxHighlighter)), Tags(Categories.SyntaxHighlighting)]
	public class After_highlighting_a_JavaScript_file_with_no_comment
	{
		private static readonly SyntaxHighlighter sh = new SyntaxHighlighter(new JavaScriptDefinition());
		private static string contents;

		private Establish context = () =>
			contents = sh.Format("function test() { x = 12; }");

		private It Should_contain_a_keyword_indicator = () => contents.ShouldContain("keyword");
		private It Should_contain_a_nonbreakingspace_indicator = () => contents.ShouldContain("&#160;");
	}

	[Subject(typeof(SyntaxHighlighter)), Tags(Categories.SyntaxHighlighting)]
	public class After_highlighting_a_Css_file_with_a_comment
	{
		private static readonly SyntaxHighlighter sh = new SyntaxHighlighter(new CssDefinition());
		private static string contents;

		private Establish context = () =>
			contents = sh.Format("body { color: #ffcc00; font: Verdana; } /* this is commented out */ ");

		private It Should_contain_a_comment_indicator = () => contents.ShouldContain("comment");
		private It Should_contain_a_keyword_indicator = () => contents.ShouldContain("keyword");
		private It Should_contain_a_special_indicator = () => contents.ShouldContain("special");
		private It Should_contain_a_nonbreakingspace_indicator = () => contents.ShouldContain("&#160;");
	}
}


