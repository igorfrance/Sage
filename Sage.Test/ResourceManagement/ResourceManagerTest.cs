// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>

/**
 * Copyright 2012 Igor France
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local
namespace Sage.Test.ResourceManagement
{
	using System;
	using System.IO;
	using System.Xml;

	using Machine.Specifications;
	using Sage.ResourceManagement;

	[Subject(typeof(ResourceManager)), Tags(Categories.ResourceManagement)]
	public class When_loading_xml_documents
	{
		static SageContext context;
		static string filePath;
		static string filePathMissing;

		Establish ctx = () =>
		{
			Project.Start(Mother.CreateHttpContext("/"));
			context = Mother.CreateSageContext("default", "uk");
			filePath = context.MapPath("~/assets/default/views/gallery/index.xml");
			filePathMissing = context.MapPath("~/assets/file/that/doesnt/exist.xml");
		};

		It Should_throw_ArgumentNullException_with_null_filepath = () =>
			Catch.Exception(() => ResourceManager.LoadXmlDocument(string.Empty, null)).ShouldBeAssignableTo<ArgumentNullException>();

		It Should_correctly_load_xml_document_that_exists = () =>
			ResourceManager.LoadXmlDocument(filePath, null).ShouldBeAssignableTo<CacheableXmlDocument>();

		It Should_throw_IOException_when_attempting_to_load_a_missing_file = () =>
			Catch.Exception(() => ResourceManager.LoadXmlDocument(filePathMissing, null)).ShouldBeAssignableTo<IOException>();

		It Should_load_document_globalized_to_english_if_the_document_is_globalizable_and_language_is_english = () =>
			ResourceManager.LoadXmlDocument(filePath, Mother.CreateSageContext("default", "uk"))
				.DocumentElement.InnerText.Trim().ShouldEqual("Test phrase in english");

		It Should_load_document_globalized_to_german_if_the_document_is_globalizable_and_language_is_german = () =>
			ResourceManager.LoadXmlDocument(filePath, Mother.CreateSageContext("default", "de"))
				.DocumentElement.InnerText.Trim().ShouldEqual("Test phrase in german");

		It Should_load_document_globalized_to_japanese_if_the_document_is_globalizable_and_language_is_japanese = () =>
			ResourceManager.LoadXmlDocument(filePath, Mother.CreateSageContext("default", "jp"))
				.DocumentElement.InnerText.Trim().ShouldEqual("Test phrase in japanese");

		It Should_correctly_load_embedded_xml_document = () =>
			ResourceManager.LoadXmlDocument("sageresx://sage.test/resources/index.xml", null)
				.DocumentElement.InnerText.Trim().ShouldEqual("Embedded resource.");

		It Should_correctly_load_and_globalize_embedded_xml_document = () =>
			ResourceManager.LoadXmlDocument("sageresx://sage.test/resources/index.xml", Mother.CreateSageContext("default", "us"))
				.DocumentElement.InnerText.Trim().ShouldContain("english");

		It Should_correctly_load_xincluding_xml_document = () =>
			ResourceManager.LoadXmlDocument("sageresx://sage.test/resources/index.xml", null)
				.DocumentElement.SelectSingleNode("included").ShouldNotBeNull();
	}

	[Subject(typeof(ResourceManager)), Tags(Categories.ResourceManagement)]
	public class When_loading_missing_files
	{
		private static SageContext context;
		private static ResourceManager resourceManager;
		private static Exception exception;

		private Establish ctx = () =>
		{
			context = Mother.CreateSageContext("default", "com");
			resourceManager = new ResourceManager(context);
		};

		private Because of = () => exception = Catch.Exception(() => resourceManager.LoadXml("Imaginary/Path.Xml"));
		private It Should_Throw_a_FileNotFoundException = () => exception.ShouldBeAssignableTo<FileNotFoundException>();
	}

	[Subject(typeof(ResourceManager)), Tags(Categories.ResourceManagement)]
	public class When_loading_a_xml_document
	{
		private static SageContext context;
		private static ResourceManager resourceManager;
		private static XmlDocument xmlDocument;

		private Establish ctx = () =>
		{
			context = Mother.CreateSageContext("default", "com");
			context = Project.InitializeConfiguration(context);
			resourceManager = new ResourceManager(context);
		};

		private Because of = () => xmlDocument = resourceManager.LoadXml(
			Utilities.ExpandResourcePath("TestSite/assets/default/dictionary/en.xml"));

		private It Should_Not_be_Null = () => xmlDocument.ShouldNotBeNull();
	}
}