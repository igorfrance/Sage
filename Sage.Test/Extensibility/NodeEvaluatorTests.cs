// <auto-generated>Marked as auto-generated so StyleCop will ignore BDD style tests</auto-generated>
/**
 * Copyright 2012 Igor France
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace Sage.Test.Extensibility
{
	// ReSharper disable InconsistentNaming
	// ReSharper disable UnusedMember.Global
	// ReSharper disable UnusedMember.Local

	using System;
	using System.Xml;
	using Machine.Specifications;
	using Sage.Extensibility;

	[Subject(typeof(NodeEvaluator)), Tags(Categories.Extensibility)]
	public class When_registering_node_handler
	{
		static readonly SageContext context = Mother.CreateSageContext("default", "uk");
		static readonly XmlDocument document = new XmlDocument();
		static XmlNode subjectNode;

		Establish ctx = () =>
		{
			document.LoadXml("<document attr1='test:var1'><myelement/></document>");
			subjectNode = document.SelectSingleNode("//myelement");
		};

		It Should_throw_exceptions_with_null_parameters = () =>
		{
			Catch.Exception(() => NodeEvaluator.RegisterNodeHandler(XmlNodeType.Element, string.Empty, string.Empty, null)).ShouldBeOfType<ArgumentNullException>();
			Catch.Exception(() => NodeEvaluator.RegisterNodeHandler(XmlNodeType.Element, "node1", string.Empty, null)).ShouldBeOfType<ArgumentNullException>();
		};

		It Should_register_the_handler_correctly = () =>
		{
			NodeEvaluator.RegisterNodeHandler(XmlNodeType.Element, "myelement", string.Empty, ProcessMyElement);
			NodeEvaluator.GetNodeHandler(subjectNode).ShouldEqual(ProcessMyElement);
		};

		It Should_use_the_handler_correctly = () =>
		{
			NodeEvaluator.RegisterNodeHandler(XmlNodeType.Element, "myelement", string.Empty, ProcessMyElement);
			NodeEvaluator.Process(context, document).InnerText.ShouldEqual("Hello!");
		};

		static XmlNode ProcessMyElement(SageContext context, XmlNode node)
		{
			return node.OwnerDocument.CreateTextNode("Hello!");
		}
	}
}
